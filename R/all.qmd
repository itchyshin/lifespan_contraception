---
title: "Code for **Female contraception and male castration increase lifespan across vertebrates**"
subtitle: "**Supplmentary Information**"
author: "**Michael Garratt, Malgorzata Lagisz, Johanna Stärk, Christine Neyt, Michael Stout, José V. V. Isola, Veronica Cowl, Nannette Driver-Ruiz, Ashley D. Franklin, Monica M. McDonald, David Powell, Susan L. Walker, Jean-Michel Gaillard, Dalia A. Conde, Jean-François Lemaître, Fernando Colchero and Shinichi Nakagawa**"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    toc-title: "**Table of Contents**"
    output-file: "index.html"
    theme: simplex
    embed-resources: true
    code-fold: true
    code-tools: true
    number-sections: true
    #bibliography: ./bib/ref.bib
    fontsize: "12"
    max-width: "10"
    code-overflow: wrap
crossref: 
  fig-title: Figure     # (default is "Figure")
  tbl-title: Table     # (default is "Table")
  title-delim: —     # (default is ":")
  fig-prefix: Fig.   # (default is "Figure")
  tbl-prefix: Tab.    # (default is "Table")
editor_options: 
  chunk_output_type: console
execute:
  warning: false
  message: false
  tidy: true
  #cache: true
---

# Setting-up

## Loading packages

```{r}
# packages ####

#ochaRd
# 
# install.packages("devtools")
# install.packages("tidyverse")
# #install.packages("metafor")
# install.packages("patchwork")
# install.packages("R.rsp")
# 
# devtools::install_github("daniel1noble/orchaRd", force = TRUE, build_vignettes = TRUE)
# remotes::install_github("rvlenth/emmeans", dependencies = TRUE, build_opts = "") 
# 
# #emmeans
# remotes::install_github("rvlenth/emmeans", dependencies = TRUE, build_opts = "")
# # metafor
# install.packages("remotes")
# remotes::install_github("wviechtb/metafor")

# loading
pacman::p_load(tidyverse,
               metafor,
               pander,
               stringr,
               ape,
               kableExtra,
               patchwork,
               lme4,
               readxl,
               emmeans,
               rotl,
               orchaRd,
               clubSandwich,
               MuMIn,
               png,
               grid,
               here,
               formatR,
               naniar,
               GoodmanKruskal,
               ggalluvial,
               ggplot2,
               cowplot,
               apextra,
               ggimage,
               ggstance,
               ggtree,
               apextra,
               phytools
)

# need for metafor to understand MuMin 
eval(metafor:::.MuMIn)
```

## Loading custom functions

```{r}
# custom functions 

# function for getting lnRR for proportional data (mortality)
# older version
# lnrrp <- function(m1, m2, n1, n2) {
#   # arcsine transforamtion
#   asin_trans <- function(p) { asin(sqrt(p)) }
#   # SD for arcsine distribution (see Wiki - https://en.wikipedia.org/wiki/Arcsine_distribution)
#   var1 <- 1/8
#   var2 <- 1/8
#   # lnRR - with 2nd order correction
#   lnrr <- log(asin_trans(m1)/asin_trans(m2)) + 
#     0.5 * ((var1 / (n1 * asin_trans(m1)^2)) - (var2 / (n2 * asin_trans(m2)^2)))	
#   
#   var <- var1 / (n1 * asin_trans(m1)^2) + var1^2 / (2 * n1^2 * asin_trans(m1)^4)  + 
#     var2 / (n2 * asin_trans(m2)^2) + var2^2 / (2 * n2^2 * asin_trans(m2)^4) 
#   
#   invisible(data.frame(yi = lnrr , vi = var))
# }

lnrrp <- function(m1, m2, n1, n2) {
  # if p1 or p2 = 0, turn into 0.025, if p1 or p2 = 1, turn into 0.975
    m1[m1 == 0] <- 0.025
    m1[m1 == 1] <- 0.975
    m2[m2 == 0] <- 0.025
    m2[m2 == 1] <- 0.975
  # arcsine transforamtion
  asin_trans <- function(p) { asin(sqrt(p)) }
  # SD for arcsine distribution (see Wiki - https://en.wikipedia.org/wiki/Arcsine_distribution)
  var1 <- 1/8
  var2 <- 1/8
  # lnRR - with 2nd order correction
  lnrr <- log(asin_trans(m1)/asin_trans(m2)) + 
    0.5 * ((var1 / (n1 * asin_trans(m1)^2)) - (var2 / (n2 * asin_trans(m2)^2)))	
  
  var <- var1 / (n1 * asin_trans(m1)^2) + var1^2 / (2 * n1^2 * asin_trans(m1)^4)  + 
    var2 / (n2 * asin_trans(m2)^2) + var2^2 / (2 * n2^2 * asin_trans(m2)^4) 
  
  invisible(data.frame(yi = lnrr , vi = var))
}


# function to get to lnRR for longevity data (CV required)
# The method proposed in Nakagawa et al (2022) - missing SD method

lnrrm <- function(m1, m2, n1, n2, cv21, cv22) {
  # lnRR - with 2nd order correction
  lnrr <- log(m1/m2) + 
    0.5 * ((cv21 /n1) - (cv22 / n2))	
  
  var <- (cv21 / n1) + ((cv21^2) / (2 * n1^2))  + 
    (cv22/ n2) + ((cv22^2) / (2 * n2^2) )
  
  invisible(data.frame(yi = lnrr , vi = var))
}

# for folded normal distribution see: https://en.wikipedia.org/wiki/Folded_normal_distribution

# folded mean
folded_mu <-function(mean, variance){
  mu <- mean
  sigma <- sqrt(variance)
  fold_mu <- sigma*sqrt(2/pi)*exp((-mu^2)/(2*sigma^2)) + mu*(1 - 2*pnorm(-mu/sigma))
  fold_mu
} 

# folded variance
folded_v <-function(mean, variance){
  mu <- mean
  sigma <- sqrt(variance)
  fold_mu <- sigma*sqrt(2/pi)*exp((-mu^2)/(2*sigma^2)) + mu*(1 - 2*pnorm(-mu/sigma))
  fold_se <- sqrt(mu^2 + sigma^2 - fold_mu^2)
  # adding se to make bigger mean
  fold_v <-fold_se^2
  fold_v
} 


# log response ratio for plotting (replacing just missing data)
# not using CV for drawing the plot
lnrrm2 <- function(m1, m2, n1, n2, sd1, sd2) {
  # lnRR - with 2nd order correction
  cv21 <- (sd1/m1)^2
  cv22 <- (sd2/m2)^2
  
  lnrr <- log(m1/m2) + 
    0.5 * ((cv21 /n1) - (cv22 / n2))	
  
  var <- (cv21 / n1) + ((cv21^2) / (2 * n1^2))  + 
    (cv22/ n2) + ((cv22^2) / (2 * n2^2) )
  
  invisible(data.frame(yi = lnrr , vi = var))
}


# turning survival % into life expectancy
# note that if m1 = treatment lives 100% (happens twice in the data then we use the height observed in the data-set)

lnrre <- function(m1, m2, n1, n2) {
  
  # expected life span transformation
  
  ea1 <- -1/log(m1)
  ea2 <- -1/log(m2)    
  # var using the delta method
  # V is not var like above - it is not sampling SD but error
  V1 <- ((1-m1)*m1/n1)*(1/(m1*log(m1)^2))^2
  V2 <- ((1-m2)*m2/n2)*(1/(m2*log(m2)^2))^2
  
  lnrr <- log(ea1/ea2)
  
  var <- V1 + V2

  
  invisible(data.frame(yi = lnrr , vi = var))
}


#' Title: Contrast name generator
#'
#' @param name: a vector of character strings
cont_gen <- function(name) {
  combination <- combn(name, 2)
  name_dat <- t(combination)
  names <- paste(name_dat[, 1], name_dat[, 2], sep = "-")
  return(names)
}

#' @title get_pred1: intercept-less model
#' @description Function to get CIs (confidence intervals) and PIs (prediction intervals) from rma objects (metafor)
#' @param model: rma.mv object 
#' @param mod: the name of a moderator 
get_pred1 <- function (model, mod = " ") {
  name <- firstup(as.character(stringr::str_replace(row.names(model$beta), mod, "")))
  len <- length(name)
  
   if (len != 1) {
        newdata <- diag(len)
        pred <- metafor::predict.rma(model, 
                                     newmods = newdata,
                                     tau2.levels = 1:len)
    }
    else {
        pred <- metafor::predict.rma(model)
  }
  estimate <- pred$pred
  lowerCL <- pred$ci.lb
  upperCL <- pred$ci.ub 
  lowerPR <- pred$cr.lb
  upperPR <- pred$cr.ub 
  
  table <- tibble(name = factor(name, levels = name, labels = name), estimate = estimate,
                  lowerCL = lowerCL, upperCL = upperCL,
                  pval = model$pval,
                  lowerPR = lowerPR, upperPR = upperPR)
}

#' @title get_pred2: normal model
#' @description Function to get CIs (confidence intervals) and PIs (prediction intervals) from rma objects (metafor)
#' @param model: rma.mv object 
#' @param mod: the name of a moderator 
get_pred2 <- function (model, mod = " ") {
  name <- as.factor(str_replace(row.names(model$beta), 
                                paste0("relevel", "\\(", mod,", ref = name","\\)"),""))
  len <- length(name)
  
  if(len != 1){
  newdata <- diag(len)
  pred <- predict.rma(model, intercept = FALSE, newmods = newdata[ ,-1])
  }
  else {
    pred <- predict.rma(model)
  }
  estimate <- pred$pred
  lowerCL <- pred$ci.lb
  upperCL <- pred$ci.ub 
  lowerPR <- pred$cr.lb
  upperPR <- pred$cr.ub 
  
  table <- tibble(name = factor(name, levels = name, labels = name), estimate = estimate,
                  lowerCL = lowerCL, upperCL = upperCL,
                  pval = model$pval,
                  lowerPR = lowerPR, upperPR = upperPR)
}

#' @title mr_results
#' @description Function to put results of meta-regression and its contrasts
#' @param res1: data frame 1
#' @param res1: data frame 2
mr_results <- function(res1, res2) {
  restuls <-tibble(
    `Fixed effect` = c(as.character(res1$name), cont_gen(res1$name)),
    Estimate = c(res1$estimate, res2$estimate),
    `Lower CI [0.025]` = c(res1$lowerCL, res2$lowerCL),
    `Upper CI  [0.975]` = c(res1$upperCL, res2$upperCL),
    `P value` = c(res1$pval, res2$pval),
    `Lower PI [0.025]` = c(res1$lowerPR, res2$lowerPR),
    `Upper PI  [0.975]` = c(res1$upperPR, res2$upperPR),
  )
}


#' @title all_models
#' @description Function to take all possible models and get their results
#' @param model: intercept-less model
#' @param mod: the name of a moderator 

all_models <- function(model, mod = " ", type = "homo") {
  
  # getting the level names out
  level_names <- levels(factor(model$data[[mod]]))
  dat2 <- model$data
  mod <- mod


  run_rma1 <- function(name) {
      VCV1 <- vcalc(vi = dat2$vi,
             cluster = dat2$species,
             obs = dat2$obs_id,
             rho = 0.5)
      
    rma.mv(yi, V = VCV1,
                   mods = ~relevel(dat2[[mod]], ref = name),
                     random = list(
                       ~1|species,
                       ~1|phylogeny,
                       ~1|obs_id),
                     R = list(phylogeny = cor_tree),
                     data = dat2,
                     control = list(optimizer = "Nelder-Mead"))
   }

    run_rma2 <- function(name) {
    
            VCVa <- vcalc(vi = dat2$abs_vi, 
                          species,
                          obs = obs_id,
                    rho = 0.5, data = dat2)
               
               rma.mv(abs_yi, V = VCVa,
               mods = ~relevel(dat2[[mod]], ref = name),
                     random = list(
                       ~1|species,
                       ~1|phylogeny,
                       ~1|obs_id),
                     R = list(phylogeny = cor_tree),
                     data = dat2,
                     control = list(optimizer = "Nelder-Mead"))
   }

# results of meta-regression including all contrast results; taking the last level out ([-length(level_names)])
# this does not work for hetero model?
if (type == "homo"){

    model_all <- purrr::map(level_names[-length(level_names)], run_rma1)

  } else {
  model_all <- purrr::map(level_names[-length(level_names)], run_rma2)
  }
  
  # getting estimates from intercept-less models (means for all the groups)
  res1 <- get_pred1(model, mod = mod)
  
  # getting estiamtes from all contrast models
  res2_pre <- purrr::map(model_all, ~ get_pred2(.x, mod = mod))
  
  # a list of the numbers to take out unnecessary contrasts
  contra_list <- Map(seq, from=1, to=1:(length(level_names) - 1))
  res2 <- purrr::map2_dfr(res2_pre, contra_list, ~.x[-(.y), ]) 
  # creating a table
  res_tab <- mr_results(res1, res2) %>% 
  kable("html",  digits = 3) %>%
  kable_styling("striped", position = "left") %>%
  scroll_box(width = "100%")
  
  # results
  res_tab

}

```


# PART I: LIFESPAN ANALYSIS ON LITERAURE DATA

# Data preparation & processing

::: panel-tabset

## Lifespan data (literature)

```{r}
#dat_full <- read_csv(here("data", "dat_07072021.csv"), na = c("", "NA")) 
#dat_full <- read_csv(here("data", "data_15022022.csv"), na = c("", "NA"))
dat_full <- read_csv(here("data", "literature", "data_05052022.csv"), na = c("", "NA"))
#glimpse(dat_full)

#loading data ####

dat_full %>% filter(is.na(Treatment_lifespan_variable) == FALSE) %>% 
  filter(Type_of_sterilization != "Vasectomy") %>% 
  mutate_if(is.character, as.factor) -> dat


#dim(dat)
#dim(dat_full)
# separating two kinds

effect_type <- ifelse(str_detect(dat$Lifespan_parameter, "Me"), "longevity", "mortality")

# splitting longevity into two types where they have SD or not
effect_type2 <- ifelse(str_detect(dat$Lifespan_parameter, "Me") & is.na(dat$Error_control_SD), "missing", effect_type)

#fix a typo in species name
dat$Species_Latin <- gsub("Macaca Fascicularis", "Macaca fascicularis", dat$Species_Latin) 
dat$Species_Latin <- gsub("Equus caballus", "Equus ferus", dat$Species_Latin)

# creating the phylo column
dat$Phylogeny <- sub(" ", "_",  dat$Species_Latin)
dat$Effect_type <- effect_type
dat$Effect_ID <- 1:nrow(dat)
# key variables
#names(dat)
#unique(dat$Species_Latin)

kable(dat, "html") %>% 
  kable_styling("striped", position = "left") %>% 
  scroll_box(width = "100%", 
    height = "250px")
```

## Calculating effect size for the main data

```{r}
# let's get CVs

dat %>% group_by(Study) %>% summarise(cv2_cont = mean((Error_control_SD/Control_lifespan_variable)^2, na.rm = T), cv2_trt = mean((Error_experimental_SD/Treatment_lifespan_variable)^2, na.rm = T), cv2_opst = mean((Error_opposite_sex_SD/Opposite_sex_lifespan_variable)^2, na.rm = T), n_cont = mean(Sample_size_control, na.rm = T), n_trt =  mean(Sample_size_sterilization, na.rm = T), n_opst =  mean(Sample_size_opposite_sex, na.rm = T)) %>% 
  ungroup() %>% 
  summarise(cv2_cont = weighted.mean(cv2_cont, n_cont, na.rm = T), cv2_trt = weighted.mean(cv2_trt, n_trt, na.rm = T), cv2_opst = weighted.mean(cv2_opst, n_opst, na.rm = T)) -> cvs

# lnRR

# survival proportion using arcsin transformation = lnrrp
# using CV
dat$yi <- ifelse(effect_type == "longevity", lnrrm(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control, cvs[["cv2_trt"]],cvs[["cv2_cont"]])[[1]], lnrrp(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control)[[1]])

dat$vi <- ifelse(effect_type == "longevity", lnrrm(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control, cvs[["cv2_trt"]],cvs[["cv2_cont"]])[[2]], lnrrp(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control)[[2]])

# here vi2 is the same as vi1
dat$vi2 <- ifelse(effect_type2 == "missing", lnrrm(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control, cvs[["cv2_trt"]],cvs[["cv2_cont"]])[[2]], 
                  ifelse(effect_type2 == "longevity", 
                  lnrrm2(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control, dat$Error_control_SD, dat$Error_experimental_SD)[[2]],                                                                         lnrrp(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization,dat$Sample_size_control)[[2]]))

# survival transformation using -1/log(p)
# first transform - just to 
pos <- which(dat$Treatment_lifespan_variable == 1)
Treatment_lifespan_variable2 <- replace(dat$Treatment_lifespan_variable, pos, 0.99)
dat$Treatment_lifespan_variable2 <-Treatment_lifespan_variable2

dat$y2 <- ifelse(effect_type == "longevity", lnrrm(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control, cvs[["cv2_trt"]],cvs[["cv2_cont"]])[[1]], lnrre(dat$Treatment_lifespan_variable2, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control)[[1]])

dat$v2 <- ifelse(effect_type == "longevity", lnrrm(dat$Treatment_lifespan_variable, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control, cvs[["cv2_trt"]],cvs[["cv2_cont"]])[[2]], lnrre(dat$Treatment_lifespan_variable2, dat$Control_lifespan_variable, dat$Sample_size_sterilization, dat$Sample_size_control)[[2]])



# getting effect size for the long format 
# we create a longer data format

dat1 <- dat
dat2 <- dat

dat1$yi <- ifelse(effect_type == "longevity", 
                  lnrrm(dat$Control_lifespan_variable, dat$Opposite_sex_lifespan_variable,  
                        dat$Sample_size_control, dat$Sample_size_opposite_sex, 
                        cvs[["cv2_cont"]],cvs[["cv2_opst"]])[[1]], 
                  lnrrp(dat$Control_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
                        dat$Sample_size_control,  dat$Sample_size_opposite_sex)[[1]])

dat1$vi <-ifelse(effect_type == "longevity", 
                 lnrrm(dat$Control_lifespan_variable,dat$Opposite_sex_lifespan_variable,  
                       dat$Sample_size_control, dat$Sample_size_opposite_sex, 
                       cvs[["cv2_cont"]],cvs[["cv2_opst"]])[[2]], 
                 lnrrp(dat$Control_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
                       dat$Sample_size_control,  dat$Sample_size_opposite_sex)[[2]])

# dat1$y2 <- ifelse(effect_type == "longevity", 
#                   lnrrm(dat$Control_lifespan_variable, dat$Opposite_sex_lifespan_variable,  
#                         dat$Sample_size_control, dat$Sample_size_opposite_sex, 
#                         cvs[["cv2_cont"]],cvs[["cv2_opst"]])[[1]], 
#                   lnrre(dat$Control_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
#                         dat$Sample_size_control,  dat$Sample_size_opposite_sex)[[1]])
# 
# dat1$v2 <-ifelse(effect_type == "longevity", 
#                  lnrrm(dat$Control_lifespan_variable,dat$Opposite_sex_lifespan_variable,  
#                        dat$Sample_size_control, dat$Sample_size_opposite_sex, 
#                        cvs[["cv2_cont"]],cvs[["cv2_opst"]])[[2]], 
#                  lnrre(dat$Control_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
#                        dat$Sample_size_control,  dat$Sample_size_opposite_sex)[[2]])

# here we create CM/F or CF/M
dat2$yi <- ifelse(effect_type == "longevity", 
                  lnrrm(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable,
                        dat$Sample_size_sterilization, dat$Sample_size_opposite_sex, 
                        cvs[["cv2_trt"]],cvs[["cv2_opst"]])[[1]], 
                  lnrrp(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
                        dat$Sample_size_sterilization, dat$Sample_size_opposite_sex)[[1]])

dat2$vi <- ifelse(effect_type == "longevity", 
                  lnrrm(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable,
                        dat$Sample_size_sterilization, dat$Sample_size_opposite_sex, 
                        cvs[["cv2_trt"]],cvs[["cv2_opst"]])[[2]], 
                  lnrrp(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
                        dat$Sample_size_sterilization, dat$Sample_size_opposite_sex)[[2]])

# 
# dat2$y2 <- ifelse(effect_type == "longevity", 
#                   lnrrm(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable,
#                         dat$Sample_size_sterilization, dat$Sample_size_opposite_sex, 
#                         cvs[["cv2_trt"]],cvs[["cv2_opst"]])[[1]], 
#                   lnrre(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
#                         dat$Sample_size_sterilization, dat$Sample_size_opposite_sex)[[1]])
# 
# dat2$v2 <- ifelse(effect_type == "longevity", 
#                   lnrrm(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable,
#                         dat$Sample_size_sterilization, dat$Sample_size_opposite_sex, 
#                         cvs[["cv2_trt"]],cvs[["cv2_opst"]])[[2]], 
#                   lnrre(dat$Treatment_lifespan_variable, dat$Opposite_sex_lifespan_variable, 
#                         dat$Sample_size_sterilization, dat$Sample_size_opposite_sex)[[2]])

# putting two data frames
dat_long <- rbind(dat1, dat2)

# putt 2 new column

dat_long$Obs <- factor(1:dim(dat_long)[[1]])
dat_long$Comp_type <- as.factor(rep(c("both_normal", "one_castrated"), each = dim(dat_long)[[1]]/2))

dat_long$Comp_type_Sex <- paste(dat_long$Comp_type, dat_long$Sex, sep = "_")

dat_long$yi <- ifelse(dat_long$Comp_type_Sex ==  "one_castrated_Female" | dat_long$Comp_type_Sex == "both_normal_Female", -1*dat_long$yi, dat_long$yi)

dat_long %>% filter(!is.na(yi), !is.na(vi)) -> dat_long

#dim(dat_long)
```

## Rodent data

This data is a subset of the main data only including data from rodents. This is used to test the effect of sterilization/castration on life stage (for these species, we were able to get more fine scale data). This dataset has two more variables: 1) Age_at_treatment (age in days when treatment was applied) and 2) Day_to_maturity (age in days when animals become mature). As also mentioned below, the analyses associated with this data set is post-hoc (not planned before data collection).

```{r}
#sdat <- read_csv(here("data", "data2_15022022.csv"), na = c("", "NA")) 
rdat <- read_csv(here("data",  "literature","data3_05052022.csv"), na = c("", "NA")) 

rdat <- rdat %>% filter(is.na(Treatment_lifespan_variable) == FALSE) %>% 
  #filter(Type_of_sterilization != "Vasectomy") %>% 
  mutate_if(is.character, as.factor) 

#dim(rdat)

# separating two kinds

effect_type_r <- ifelse(str_detect(rdat$Lifespan_parameter, "Me"), "longevity", "mortality")


# effect-level ID
#dat$Species_Latin <- gsub("Macaca Fascicularis", "Macaca fascicularis", dat$Species_Latin) #fix a typo in species name
rdat$Effect_ID <- 1:nrow(rdat)
rdat$Phylogeny <- sub(" ", "_",  rdat$Species_Latin)
rdat$Effect_type <- effect_type_r

# key variables
#names(rdat)
#unique(rdat$Species_Latin)

kable(rdat, "html") %>% 
  kable_styling("striped", position = "left") %>% 
  scroll_box(width = "100%", 
    height = "250px")
```

## Calculating effect size for the rodent data

```{r}
# let's get CVs

rdat %>% group_by(Study) %>% summarise(cv2_cont = mean((Error_control_SD/Control_lifespan_variable)^2, na.rm = T), cv2_trt = mean((Error_experimental_SD/Treatment_lifespan_variable)^2, na.rm = T), cv2_opst = mean((Error_opposite_sex_SD/Opposite_sex_lifespan_variable)^2, na.rm = T), n_cont = mean(Sample_size_control, na.rm = T), n_trt =  mean(Sample_size_sterilization, na.rm = T), n_opst =  mean(Sample_size_opposite_sex, na.rm = T)) %>% 
  ungroup() %>% 
  summarise(cv2_cont = weighted.mean(cv2_cont, n_cont, na.rm = T), cv2_trt = weighted.mean(cv2_trt, n_trt, na.rm = T), cv2_opst = weighted.mean(cv2_opst, n_opst, na.rm = T)) -> cvs

# lnRR
# using CV
rdat$yi <- ifelse(effect_type_r == "longevity", lnrrm(rdat$Treatment_lifespan_variable, rdat$Control_lifespan_variable, rdat$Sample_size_sterilization, rdat$Sample_size_control, cvs[["cv2_trt"]],cvs[["cv2_cont"]])[[1]], lnrrp(rdat$Treatment_lifespan_variable, rdat$Control_lifespan_variable, rdat$Sample_size_sterilization, rdat$Sample_size_control)[[1]])

rdat$vi <- ifelse(effect_type_r == "longevity", lnrrm(rdat$Treatment_lifespan_variable, rdat$Control_lifespan_variable, rdat$Sample_size_sterilization, rdat$Sample_size_control, cvs[["cv2_trt"]],cvs[["cv2_cont"]])[[2]], lnrrp(rdat$Treatment_lifespan_variable, rdat$Control_lifespan_variable, rdat$Sample_size_sterilization, rdat$Sample_size_control)[[2]])

#str(rdat)
```

This dataset is a part of the full data and only has data from rodent species.

## All-combination data

This data sets is a subset of the main data and this includes only study which has all 4 groups: 1) control females, 2) control males, 3) treated females and 4) treated males.

```{r}
#sdat <- read_csv(here("data", "data2_15022022.csv"), na = c("", "NA")) 
sdat <- read_csv(here("data", "literature", "data2_19042022.csv"), na = c("", "NA")) 
effect_type_s <- ifelse(str_detect(sdat$Lifespan_parameter, "Me"), "longevity", "mortality")


# effect-level ID

sdat$Effect_ID <- 1:nrow(sdat)
sdat$Phylogeny <- sub(" ", "_",  sdat$Species_Latin)
sdat$Effect_type <- effect_type_s

kable(sdat, "html") %>% 
  kable_styling("striped", position = "left") %>% 
  scroll_box(width = "100%", 
    height = "250px")
```

## Calculating effect size for the matching data

```{r}
# we create a longer data format

sdat1 <- sdat
sdat2 <- sdat
# lnRR

# here we create the ratio of M/F
sdat1$yi <- ifelse(effect_type_s == "longevity", 
                  lnrrm(sdat$Male_control_lifespan_variable, sdat$Female_control_lifespan_variable,
                        sdat$Sample_size_male_control, sdat$Sample_size_female_control, 
                        cvs[["cv2_cont"]],cvs[["cv2_cont"]])[[1]], 
                  lnrrp(sdat$Male_control_lifespan_variable, sdat$Female_control_lifespan_variable, 
                        sdat$Sample_size_male_control,  sdat$Sample_size_female_control)[[1]])

sdat1$vi <- ifelse(effect_type_s == "longevity", 
                  lnrrm(sdat$Male_control_lifespan_variable, sdat$Female_control_lifespan_variable,
                        sdat$Sample_size_male_control, sdat$Sample_size_female_control, 
                        cvs[["cv2_cont"]],cvs[["cv2_cont"]])[[2]], 
                  lnrrp(sdat$Male_control_lifespan_variable, sdat$Female_control_lifespan_variable, 
                        sdat$Sample_size_male_control,  sdat$Sample_size_female_control)[[2]])

# here we create CM/CF
sdat2$yi <- ifelse(effect_type_s == "longevity", 
                  lnrrm(sdat$Male_sterilization_lifespan_variable, sdat$Female_sterilization_lifespan_variable,
                        sdat$Sample_size_male_sterilization, sdat$Sample_size_female_sterilization, 
                        cvs[["cv2_trt"]],cvs[["cv2_trt"]])[[1]], 
                  lnrrp(sdat$Male_sterilization_lifespan_variable, sdat$Female_sterilization_lifespan_variable, 
                        sdat$Sample_size_male_sterilization,  sdat$Sample_size_female_sterilization)[[1]])

sdat2$vi <-  ifelse(effect_type_s == "longevity", 
                   lnrrm(sdat$Male_sterilization_lifespan_variable, sdat$Female_sterilization_lifespan_variable,
                         sdat$Sample_size_male_sterilization, sdat$Sample_size_female_sterilization, 
                         cvs[["cv2_trt"]],cvs[["cv2_trt"]])[[2]], 
                   lnrrp(sdat$Male_sterilization_lifespan_variable, sdat$Female_sterilization_lifespan_variable, 
                         sdat$Sample_size_male_sterilization,  sdat$Sample_size_female_sterilization)[[2]])

# merging sdata frames
sdat_long <- rbind(sdat1, sdat2)

# putt 2 new column

sdat_long$Obs <- factor(1:dim(sdat_long)[[1]])
sdat_long$Comp_type <- as.factor(rep(c("both_normal", "both_castrated"), each = dim(sdat_long)[[1]]/2))

```

## Meta-data

```{r}
#sdat <- read_csv(here("data", "data2_15022022.csv"), na = c("", "NA")) 
mdat <- read_csv(here("data", "literature", "data_meta-data.csv")) 


kable(mdat, "html") %>% 
  kable_styling("striped", position = "left") %>% 
  scroll_box(width = "100%", 
    height = "250px")
```
:::

# Summarise the dataset {.tabset .tabset-pills .tabset-fade}

::: panel-tabset
## Visualising missing data

```{r missing data, echo = FALSE}
#vis_miss(dat) #mostly data is missing at comment fields

vis_miss(dat) +
  theme(plot.title = element_text(hjust = 0.5, vjust = 3), 
        plot.margin = margin(t = 0.5, r = 2, b = 1, l = 1, unit = "cm")) +
  ggtitle("Missing data overall") #no mising values
```

## Key predictors (moderators)

Visualise missing data in 6 key variables (moderators):
- Sex,
- Wild_or_semi_wild,
- Maturity_at_treatment_ordinal,
- Gonads_removed,
- Controlled_treatments,
- Effect_type

```{r key variables missing values, echo = FALSE}
#create a data subset wth key variables only
dat_key <- dat %>% select(Sex, Wild_or_semi_wild, Maturity_at_treatment_ordinal, Gonads_removed, Controlled_treatments, Effect_type)

vis_miss(dat_key) +
  theme(plot.title = element_text(hjust = 0.5, vjust = 3), 
        plot.margin = margin(t = 0.5, r = 2, b = 1, l = 1, unit = "cm")) +
  ggtitle("Missing data in key variables") #32% mising values in Maturity_at_treatment_ordinal only
```

## Visualize pairwise associations between 6 key variables:

```{r key variables associations, echo = FALSE}
#names(dat_key)
#useGoodman and Kruskal’s τ measure of association between categorical predictor variables (function from package GoodmanKruskal: https://cran.r-project.org/web/packages/GoodmanKruskal/vignettes/GoodmanKruskal.html)
GKmatrix <- GKtauDataframe(subset(dat_key))
#par(mar=c(1,1,2,4))
plot(GKmatrix)
```

Alluvial diagrams for key predictor variables (moderators) - two groups of 3 moderators, grouped by similarity:

## For Sex, Gonads_removed, & Maturity_at_treatment_ordinal

0 in Mautraity class is NA

```{r alluvial plots A, results = 'hide'}
#use ggalluvial (https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html)

# create a frequency table for first 3 moderator variables
# freq_1 <- as.data.frame(table(dat$Sex, dat$Gonads_removed, dat$Maturity_at_treatment_ordinal)) %>% rename(Sex = Var1, Gonads_removed = Var2, Maturity_at_treatment_ordinal = Var3)
# is_alluvia_form(as.data.frame(freq_1), axes = 1:3, silent = TRUE)
# #freq_1 %>% filter(Freq != 0) %>% arrange(desc(Freq)) #collapesd table of values, without 0s

 
# ggplot(data = freq_1,
#   aes(axis1 = Sex, axis2 = Gonads_removed, axis3 = Maturity_at_treatment_ordinal, y = Freq)) +
#   geom_alluvium(aes(fill = Sex)) +
#   geom_stratum(aes(fill = Sex))+
#   geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
# #theme_minimal() +
#   theme_void() +
#   theme(legend.position = "none",
#         plot.title = element_text(hjust = 0.5, vjust = 3),
#         axis.title.x = element_text(),
#         axis.text.x = element_text(face="bold")) +
#   scale_x_discrete(limits = c("Sex", "Gonads removed", "Maturity class"), expand = c(0.15, 0.05), position = "top") +
#   scale_fill_brewer(palette = "Set3") +
#   ggtitle("A. Subjects sex, manipulation type and maturity class")

#as above but with, but with Gonads_removed as first column, and different colours
# ggplot(data = freq_1,
#   aes(axis1 = Gonads_removed, axis2 = Sex, axis3 = Maturity_at_treatment_ordinal, y = Freq)) +
#   geom_alluvium(aes(fill = Gonads_removed)) +
#   geom_stratum(aes(fill = Gonads_removed))+
#   geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
#   theme_minimal() +
# #  theme_void() +
#   theme(legend.position = "none",
#         plot.title = element_text(hjust = 0.5, vjust = 3),
#         axis.title.x = element_text(),
#         axis.text.x = element_text(face="bold")) +
#   scale_x_discrete(limits = c("Gonads_removed", "Sex", "Maturity class"), expand = c(0.15, 0.05), position = "top") +
#   scale_fill_brewer(palette = "Pastel2") +
#   ggtitle("A. Subjects sex, manipulation and maturity ")

#NOTE: all rows with NA in Maturity class are removed from the plot 
#recode NA as 0
dat$Maturity_at_treatment_ordinal2 <- dat$Maturity_at_treatment_ordinal
dat$Maturity_at_treatment_ordinal2[is.na(dat$Maturity_at_treatment_ordinal2)] <- 0
# create a frequency table for first 3 moderator variables
freq_1 <- as.data.frame(table(dat$Sex, dat$Gonads_removed, dat$Maturity_at_treatment_ordinal2)) %>% rename(Sex = Var1, Gonads_removed = Var2, Maturity_at_treatment_ordinal = Var3)
is_alluvia_form(as.data.frame(freq_1), axes = 1:3, silent = TRUE)
#freq_1 %>% filter(Freq != 0) %>% arrange(desc(Freq)) #collapesd table of values, without 0s

 
# ggplot(data = freq_1,
#   aes(axis1 = Sex, axis2 = Gonads_removed, axis3 = Maturity_at_treatment_ordinal, y = Freq)) +
#   geom_alluvium(aes(fill = Sex)) +
#   geom_stratum(aes(fill = Sex))+
#   geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
# #theme_minimal() +
#   theme_void() +
#   theme(legend.position = "none",
#         plot.title = element_text(hjust = 0.5, vjust = 3),
#         axis.title.x = element_text(),
#         axis.text.x = element_text(face="bold")) +
#   scale_x_discrete(limits = c("Sex", "Gonads removed", "Maturity class"), expand = c(0.15, 0.05), position = "top") +
#   scale_fill_brewer(palette = "Set3") +
#   ggtitle("A. Subjects sex, manipulation type and maturity class")

#as above but with, but with Gonads_removed as first column, and different colours
ggplot(data = freq_1,
  aes(axis1 = Gonads_removed, axis2 = Sex, axis3 = Maturity_at_treatment_ordinal, y = Freq)) +
  geom_alluvium(aes(fill = Gonads_removed)) +
  geom_stratum(aes(fill = Gonads_removed))+
  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
  theme_minimal() +
#  theme_void() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5, vjust = 3),
        axis.title.x = element_text(),
        axis.text.x = element_text(face="bold")) +
  scale_x_discrete(limits = c("Gonads_removed", "Sex", "Maturity class"), expand = c(0.15, 0.05), position = "top") +
  scale_fill_brewer(palette = "Pastel2") +
  ggtitle("A. Subjects sex, manipulation and maturity ")
```

## For Wild_or_semi_wild, Controlled_treatments, & Effect_type (Outcome type)

```{r alluvial plots B, results = 'hide'}
# create a frequency table for next 3 moderator variables
freq_2 <- as.data.frame(table(dat$Wild_or_semi_wild, dat$Controlled_treatments, dat$Effect_type)) %>% rename(Wild_or_semi_wild = Var1, Controlled_treatments = Var2, Effect_type = Var3)
is_alluvia_form(as.data.frame(freq_2), axes = 1:3, silent = TRUE)
#freq_2 %>% filter(Freq != 0) %>% arrange(desc(Freq)) #collapesd table of values, without 0s

ggplot(data = freq_2,
  aes(axis1 = Wild_or_semi_wild, axis2 = Controlled_treatments, axis3 = Effect_type, y = Freq)) +
  geom_alluvium(aes(fill = Wild_or_semi_wild)) +
  geom_stratum(aes(fill = Wild_or_semi_wild))+
  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
  theme_minimal() +
#  theme_void() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5, vjust = 3),
        axis.title.x = element_text(),
        axis.text.x = element_text(face="bold")) +
  scale_x_discrete(limits = c("Wild_or_semi_wild", "Controlled_treatments", "Outcome type"), expand = c(0.15, 0.05), position = "top") +
  scale_fill_brewer(palette = "Pastel1") +
  ggtitle("B. Experimental settings and outcome type")

#names(dat_key)
```

## For Gonads_removed, Wild_or_semi_wild, Controlled_treatments, & Effect_type (Outcome type)

```{r alluvial plots C, results = 'hide'}
# create a frequency table for next 3 moderator variables
freq_3 <- as.data.frame(table(dat$Gonads_removed, dat$Wild_or_semi_wild, dat$Effect_type)) %>% rename(Gonads_removed = Var1, Wild_or_semi_wild = Var2, Effect_type = Var3)
is_alluvia_form(as.data.frame(freq_3), axes = 1:3, silent = TRUE)
#freq_2 %>% filter(Freq != 0) %>% arrange(desc(Freq)) #collapesd table of values, without 0s

ggplot(data = freq_3,
  aes(axis1 = Gonads_removed, axis2 = Wild_or_semi_wild, axis3 = Effect_type, y = Freq)) +
  geom_alluvium(aes(fill = Gonads_removed)) +
  geom_stratum(aes(fill = Gonads_removed))+
  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
  theme_minimal() +
#  theme_void() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5, vjust = 3),
        axis.title.x = element_text(),
        axis.text.x = element_text(face="bold")) +
  scale_x_discrete(limits = c("Gonads_removed", "Wild_or_semi_wild", "Outcome type"), expand = c(0.15, 0.05), position = "top") +
  scale_fill_brewer(palette = "Set3") +
  ggtitle("C. Manipulation, subject and outcome types")

#names(dat_key)
```

This just shows a different combination of predictor variables (moderators) from plots A and B.
:::

# Building phylogenetic tree

::: panel-tabset
## Preparation

```{r get species list, message = FALSE, echo = TRUE, eval = FALSE, warning = FALSE}
#names(dat)
myspecies <- as.character(unique(dat$Species_Latin)) #get list of species
#str_sort(myspecies) #visual check
#length(myspecies) #23 species
#length(unique(myspecies)) #23 unique species names
```

Using *rotl* package to retrieve synthetic species tree from Open Tree of Life: Rotl is an R package (<https://peerj.com/preprints/1471/>) allowing access to synthetic phylogenetic tree available at Open Tree of Life database (<https://opentreeoflife.org/>).

```{r rotl find species, message = FALSE, echo = TRUE, eval = FALSE, warning = FALSE}
taxa <- tnrs_match_names(names = myspecies)
dim(taxa) #40 specias - all matched
table(taxa$approximate_match) #1 approximate match
taxa[taxa$approximate_match == TRUE, ] ##lamperta fluviatilis (search_string) will be presented as Perca fluviatilis (uniquw_name)
```

## Get the initial tree

```{r rotl species tree, warning = FALSE, results=FALSE, eval= FALSE, echo = TRUE}
tree <- tol_induced_subtree(ott_ids = taxa[["ott_id"]], label_format = "name")  
# plot(tree, cex=.6, label.offset =.1, no.margin = TRUE) visual check
```

## Check matching species & labels

```{r re-check tree labels, eval=F, echo=T}
#check overlap and differences with the taxa list
intersect(gsub("_"," ", tree$tip.label), myspecies) #22
setdiff(gsub("_"," ", tree$tip.label), myspecies) # "Perca fluviatilis"  
setdiff(myspecies, gsub("_"," ", tree$tip.label)) # "Lamperta fluviatilis"
tree$tip.label <- gsub("Perca_fluviatilis", "Lamperta_fluviatilis", tree$tip.label) #replace with the original name

#tree <- drop.tip(tree, "Equus_caballus")
#re-check overlap and differences with myspecies list
#intersect(myspecies, tree2$tip.label) #23
#setdiff(myspecies, tree2$tip.label) #0
#setdiff(tree2$tip.label, myspecies) #0

#check if the tree is really binary 
is.binary.tree(tree) #TRUE
# tree_binary$node.label <- NULL #you can delete internal node labels
# *NOTE:* no branch lengths are included, they can be created later via simulations.  

write.tree(tree, file=here("data", "tree_rotl.tre")) #save the tree

# *NOTE:* underscores within species names on tree tip labals are added automatically
# tree <- read.tree(file="plot_cooked_fish_MA.tre") #if you need to read in the tree
# tree$tip.label <- gsub("_"," ", tree$tip.label) #get rid of the underscores
# tree$node.label <- NULL #you can delete internal node labels
```

## Plot phylogenetic tree

```{r plot phylogenetic tree, fig.width=10, fig.height=20, echo=TRUE, message=FALSE}

tree <- read.tree(here("data", "literature","tree_rotl.tre"))

plot(tree, cex=.6, label.offset =.1, no.margin = TRUE)

# #or plot to pdf
# pdf(here("figs/rotl_tree.pdf"), width=8, heigh=10)
# plot(tree, cex=0.6, label.offset =.1, no.margin = TRUE)
# dev.off()
```
:::

# Meta-analysis: main

::: panel-tabset
## Main model

```{r}
# VCV matrix to model shared control 
V_matrix <- impute_covariance_matrix(vi = dat$vi, cluster = dat$Shared_control, r = 0.5)

# phylogeny to model
#tree <- read.tree(here("data/tree_rotl.tre"))
tree <- compute.brlen(tree)

cor_tree <- vcv(tree, corr = TRUE)

# checking the match
#match(unique(dat$Phylogeny), colnames(cor_tree))


# meta-analysis basics
# phylogenetic model
mod <-  rma.mv(yi, V = V_matrix, mod = ~ 1, 
               random = list(~1|Phylogeny, 
                             ~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               R = list(Phylogeny = cor_tree), 
               data = dat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
               )
summary(mod) 

round(i2_ml(mod),2) # almost no phylogenetic effect

# visualizing the result
orchard_plot(mod, xlab = "log response ratio (lnRR)", group = "Study")
```

```{r}
# reduced model without phylogeny 
# alternative


mod2 <-  rma.mv(yi, V = V_matrix, mod = ~ 1, 
               random = list(#~1|Phylogeny, 
                             ~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               #R = list(Phylogeny = cor_tree), 
               data = dat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
               )
summary(mod2) 
# we will not use robust for the analysis - they do not seem to change the results
# rob2.2 <- robust(mod2, cluster = Study, adjust=TRUE, clubSandwich=TRUE, verbose=TRUE)
# rob2.2

anova(mod, mod2) # they are not significantly different

```

## Alternative effect size

```{r}
# using alternative effect size: -1/ln(p)

V_matrix2 <- impute_covariance_matrix(vi = dat$v2, cluster = dat$Shared_control, r = 0.5)

#
mod_alt <-  rma.mv(y2, V = V_matrix2, mod = ~ 1, 
               random = list(~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               data = dat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
               )
summary(mod_alt) 

round(i2_ml(mod_alt),2) # almost no phylogenetic effect

# visualizing the result
orchard_plot(mod_alt, xlab = "log response ratio (lnRR)", group = "Study")
```

:::

# Meta-regression: non-full models

::: panel-tabset
## Model function

```{r}

# no phylogeny

mod_func <-  function(formula) {
        rma.mv(yi, 
               V = V_matrix,
               mod = formula, 
               random = list(#~1|Phylogeny, 
                             ~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               data = dat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
                            #optmethod="BFGS")
               )
}

```

## Sex difference (`Sex`)

```{r}
mod_sex <- mod_func(formula = ~ Sex-1)
summary(mod_sex)
# contrast
mod_sex1 <- mod_func(formula = ~ Sex)
summary(mod_sex1)
r2_ml(mod_sex1)

# orchard plot
#test <- mod_results(mod_sex1, mod = "Sex", group = "Study", data = dat)
p1 <- orchard_plot(mod_sex1, mod = "Sex", 
                   xlab = "log response ratio (lnRR)", 
                   group = "Study",cb = F,
                   angle = 0)

p1
```

## Gonad Removal (`Sex_Gonads`)

```{r}
# creating a new variable Sex + Gonad because 

dat$Sex_Gonads <- paste(dat$Sex, dat$Gonads_removed, sep = "_")

dat$Sex_Gonads[grep("NA", dat$Sex_Gonads)] <- NA


dat$Sex_Gonads <- factor(dat$Sex_Gonads, 
       levels = c("Female_No", "Female_Yes", "Male_Yes"),
       labels = c("Gonads removed \n(female)", "Gonads not removed \n(female)", "Gonads removed \n(male)") 
       )


mod_rem <- mod_func(formula = ~ Sex_Gonads-1)
summary(mod_rem)
# contrast
mod_rem1 <- mod_func(formula = ~ Sex_Gonads)
summary(mod_rem1)
r2_ml(mod_rem1)

# orchard plot
p2 <- orchard_plot(mod_rem, mod = "Sex_Gonads", 
                   xlab = "log response ratio (lnRR)", 
                   group = "Study", cb = F,
                   angle = 0) 

p2
```

## Environmental (`Wild_or_semi_wild`)

```{r}

dat$Wild_or_semi_wild <- factor(dat$Wild_or_semi_wild, 
       levels = c("No", "Yes"),
       labels = c("Others \n(e.g., lab, farm)" , "Wild or \nSemi-wild") 
       )


mod_env <- mod_func(formula = ~ Wild_or_semi_wild-1)
summary(mod_env)
# contrast
mod_env1 <- mod_func(formula = ~ Wild_or_semi_wild)
summary(mod_env1)
r2_ml(mod_env1)

# orchard plot
p3 <- orchard_plot(mod_env1, mod = "Wild_or_semi_wild", 
                   xlab = "log response ratio (lnRR)", 
                   group = "Study") +
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  scale_colour_manual(values = c("#D55E00", "#009E73")) 

p3
```

## Controlled treatment (`Controlled_treatments`)

```{r}

dat$Controlled_treatments <- factor(dat$Controlled_treatments, 
       levels = c("No", "Yes"),
       labels = c("Not controlled" , "Controlled") 
       )

mod_con <- mod_func(formula = ~ Controlled_treatments-1)
summary(mod_con)
# contrast
mod_con1 <- mod_func(formula = ~ Controlled_treatments)
summary(mod_con1)
r2_ml(mod_con1)

# orchard plot
p4 <- orchard_plot(mod_con1, mod = "Controlled_treatments", 
                   xlab = "log response ratio (lnRR)",
                   group = "Study") +
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  scale_colour_manual(values = c("#D55E00", "#009E73")) 

p4
```

## Sham (`Shamtreatment_moderator`)

```{r}
dat$Shamtreatment_moderator <- factor(dat$Shamtreatment_moderator, 
       levels = c("No", "Yes"),
       labels = c("No sham" , "Sham-controlled") 
       )

mod_sham <- mod_func(formula = ~ Shamtreatment_moderator-1)
summary(mod_sham)
# contrast
mod_sham1 <- mod_func(formula = ~ Shamtreatment_moderator)
summary(mod_sham1)
r2_ml(mod_sham1)

# orchard plot
p5 <- orchard_plot(mod_sham, mod = "Shamtreatment_moderator", 
             xlab = "log response ratio (lnRR)", 
             group = "Study") +
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  scale_colour_manual(values = c("#D55E00", "#009E73")) 

p5
```

## Type of effect sizes (`Effect_type`)

```{r}
dat$Effect_type <- factor(dat$Effect_type, 
       levels = c("longevity", "mortality"),
       labels = c("Mean or meadian \nlongevity" , "Mortality \n(%)") 
       )

mod_eff <- mod_func(formula = ~ Effect_type-1)
summary(mod_eff)
# contrast
mod_eff1 <- mod_func(formula = ~ Effect_type)
summary(mod_eff1)
r2_ml(mod_eff1)

# orchard plot
p6 <- orchard_plot(mod_eff1, mod = "Effect_type", 
             xlab = "log response ratio (lnRR)", 
             group = "Study",cb = F) +
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  scale_colour_manual(values = c("#D55E00", "#009E73")) 
p6
```

```{r}
mod_effa <- mod_alt1 <-  rma.mv(y2, V = V_matrix2,
              mod = ~ Effect_type-1, 
               random = list(~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               data = dat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead"))
summary(mod_effa)

mod_effa1 <- mod_alt1 <-  rma.mv(y2, V = V_matrix2,
              mod = ~ Effect_type, 
               random = list(~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               data = dat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead"))
summary(mod_effa1)
r2_ml(mod_effa1)


# orchard plot
orchard_plot(mod_effa1, mod = "Effect_type", 
             xlab = "log response ratio (lnRR)", 
             group = "Study",cb = F) +
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  scale_colour_manual(values = c("#D55E00", "#009E73")) 
```

## Matuarity (`Maturity_at_treatment_ordinal`)

```{r}

mod_mat <- mod_func(formula = ~ Maturity_at_treatment_ordinal)
summary(mod_mat)
r2_ml(mod_mat)

# bubble plot
p7 <- bubble_plot(mod_mat, 
                  xlab = "Life-course stages",
                  ylab = "lnRR (effect size)",
            mod = "Maturity_at_treatment_ordinal", 
            group = "Study", cb = F)

p7
```

## Sex x Matuarity

```{r}
# interaction with Sex
mod_sex_mat <- mod_func(formula = ~ Sex*Maturity_at_treatment_ordinal)
summary(mod_sex_mat)
r2_ml(mod_mat)

# different reference (gives whether male slope is significant)
mod_sex_mat1 <- mod_func(formula = ~ relevel(Sex,ref = "Male")*Maturity_at_treatment_ordinal)
summary(mod_sex_mat1)

# bubble plot
p8 <- bubble_plot(mod_sex_mat, 
                  xlab = "Life-course stages",
                  ylab = "lnRR (effect size)",
            mod = "Maturity_at_treatment_ordinal", 
            group = "Study", by = "Sex")

p8
```

:::

# Meta-regression: full model

::: panel-tabset
## Full model

```{r}
# at least 10 in each group (sex * wild = male wild is too few - 4)

mod_full <- mod_func(formula = ~ Sex_Gonads + Sex*Controlled_treatments +  Wild_or_semi_wild + Sex*Maturity_at_treatment_ordinal)
summary(mod_full)
r2_ml(mod_full)
```

## AIC model selection

```{r}
#| eval: false

#res_mod_full <- dredge(mod_full, trace=2)
res_mod_full <- dredge(mod_full, trace=2)

saveRDS(res_mod_full, file = here("Rdata", "literature", "res_mod_full.rds"))
```

```{r}
res_mod_full <- readRDS(file = here("Rdata","literature", "res_mod_full.rds"))

# delta AIC = 2
res_mod_full2<- subset(res_mod_full, delta <= 2) #, recalc.weights=FALSE)

# the best model according to the delta 2
best2 <- mod_func(formula = ~ Controlled_treatments + Wild_or_semi_wild)
#summary(best2)

# model varaged coeffisents
avg2 <- model.avg(res_mod_full2)
summary(avg2) # similar to the orignal resulde

# note 
# controlling and wild-semi-wide is correlated: r = 0.34
#cor.test(as.numeric(dat$Controlled_treatments),as.numeric(dat$Wild_or_semi_wild))

```
:::

# Publication bais & sensitivity analysis

::: panel-tabset
## Funnel plot

```{r}
# raw funnel plot
# funnel plot - 
funnel(mod)

# residual funnel plot
funnel(best2)

```

## Small-study effect: uni-moderaotor

```{r}

dat$Effective_N <- 1/dat$Sample_size_sterilization + 1/dat$Sample_size_control

egger_uni <- mod_func(formula = ~ sqrt(Effective_N))
#egger_uni2 <- mod_func(formula = ~ Effective_N)

summary(egger_uni)

# 
egger_uni2 <- mod_func(formula = ~ Effective_N)
summary(egger_uni2)
```

## Decline effect (time lag bias): uni-moderator

```{r}

dat$Year <- as.numeric(str_extract(as.character(dat$Study),"[:digit:][:digit:][:digit:][:digit:]"))

decline_uni <- mod_func(formula = ~ Year)
summary(decline_uni)
```

## Leave-one-study-out analysis

```{r}
#| eval: false
# The function for leave-one-study-out

dat$Study <- as.factor(dat$Study)

LeaveOneOut_effectsize <- list()
for(i in 1:length(levels(dat$Study))){
  dat1 <- dat[dat$Study != levels(dat$Study)[i], ]
  V_matrix <- impute_covariance_matrix(vi = dat1$vi, cluster = dat1$Shared_control, r = 0.5)
  
  LeaveOneOut_effectsize[[i]] <- rma.mv(yi, 
               V = V_matrix,
               random = list(~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="BFGS"),
               data = dat1)
  }


# writing function for extracting est, ci.lb, and ci.ub from all models
est.func <- function(mod){
  df <- data.frame(est = mod$b, lower = mod$ci.lb, upper = mod$ci.ub)
  return(df)
}

#using dplyr to form data frame
MA_LOO <- lapply(LeaveOneOut_effectsize, function(x) est.func(x))%>% bind_rows %>% mutate(left_out = levels(dat$Study))


saveRDS(MA_LOO,file = here("Rdata", "literature","MA_LOO.rds"))
```

```{r}
#telling ggplot to stop reordering factors
MA_LOO <- readRDS(file = here("Rdata",  "literature", "MA_LOO.rds"))

MA_LOO$left_out<- as.factor(MA_LOO$left_out)
MA_LOO$left_out<-factor(MA_LOO$left_out, levels = MA_LOO$left_out)


#plotting
leaveoneout_E <- ggplot(MA_LOO) +
  geom_hline(yintercept = 0, lty = 2, lwd = 1) +
  geom_hline(yintercept = mod$ci.lb, lty = 3, lwd = 0.75, colour = "black") +
  geom_hline(yintercept = mod$b, lty = 1, lwd = 0.75, colour = "black") +
  geom_hline(yintercept = mod$ci.ub, lty = 3, lwd = 0.75, colour = "black") +
  geom_pointrange(aes(x = left_out, y = est, ymin = lower, ymax = upper)) +
  xlab("Study left out") + 
  ylab("lnRR, 95% CI") + 
  coord_flip() +
  theme(panel.grid.minor = element_blank())+
  theme_bw() + theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor.x = element_blank() ) +
  theme(axis.text.y = element_text(size = 6))

leaveoneout_E
```
:::

# Meta-analysis: rodent data only {.tabset .tabset-pills .tabset-fade}

We note that the analyses below using rodent data are post-host analyses.

::: panel-tabset
## Main model

```{r}
# shared control 
# this does not seem to work
#V_matrix <- make_VCV_matrix(dat, V= "vi", cluster = "Shared_control", obs = "Effect_ID")
V_matrix <- impute_covariance_matrix(vi = rdat$vi, cluster = rdat$Shared_control, r = 0.5)

# meta-analysis basics
# phylo model
rmod <-  rma.mv(yi, V = V_matrix, mod = ~ 1, 
               random = list(~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               data = rdat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
               )
summary(rmod) 

i2_ml(rmod) 
```

```{r}
# visualizing the result
orchard_plot(rmod, xlab = "log response ratio (lnRR)", group = "Study")

```

## Sex difference (`Sex`)

```{r}
rmod_sex <-  rma.mv(yi, V = V_matrix, mod = ~ Sex, 
               random = list(~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               data = rdat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
               )
summary(rmod_sex) 

r2_ml(rmod_sex) 
```

```{r}
# visualizing the result
orchard_plot(rmod_sex, mod = "Sex", 
             xlab = "log response ratio (lnRR)", 
             group = "Study")
```

## Maturity (in days)

```{r}

# two more type of ages
rdat$lnAge_Trt <- log(rdat$Age_at_treatment_continuous)
rdat$Age_ratio <- (rdat$Age_at_treatment_continuous/rdat$Day_to_matuarity)
rdat$lnAge_ratio <- log(rdat$Age_at_treatment_continuous/rdat$Day_to_matuarity)


# just pure effect
rmod_mat <- rma.mv(yi, V = V_matrix, mod = ~ lnAge_ratio*Sex, 
               random = list(~1|Species_Latin, 
                             ~1|Study, 
                             ~1|Effect_ID), 
               data = rdat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
               )
summary(rmod_mat)
r2_ml(rmod_mat)

```

```{r}
# visualizing the result
bubble_plot(rmod_mat, mod = "lnAge_ratio", group = "Study", 
            by = "Sex", 
            xlab = "ln(Treatment Day/Day to sexual maturity) [Rodent data only]", 
            ylab = "ln(Response ratio)")
```
:::

# Contrasting sexes: full data

::: panel-tabset
## Calcuating aboslute effect sizes

```{r}

# full data
dat_long <- dat_long %>% mutate(abs_yi = folded_mu(yi, vi), 
                      abs_vi = folded_v(yi, vi))

# partial data
sdat_long <- sdat_long %>% mutate(abs_yi = folded_mu(yi, vi), 
                      abs_vi = folded_v(yi, vi))
```

## Comparing M/F vs. M$\star$/F or M/F$\star$

```{r}
# variance covariance matrix
V_matrix_long <- impute_covariance_matrix(vi = dat_long$vi, cluster = dat_long$Shared_control, r = 0.5)

# we can run - some heteroscad models
# this does not improve model
mod_comp <-  rma.mv(yi, V = V_matrix_long, 
                 mod = ~ Comp_type - 1, 
                 random = list(~1|Species_Latin, 
                               ~1|Study, 
                               ~1|Effect_ID, 
                               ~1|Obs ), 
                 test = "t",
                 sparse = TRUE,
                 data = dat_long)
summary(mod_comp) 
r2_ml(mod_comp)
```

```{r}
# visualizing the result
orchard_plot(mod_comp, mod = "Comp_type", xlab = "log response ratio (lnRR)", 
             group = "Study", 
             cb = F)
```

## Separating by sex (M/F vs. M$\star$/F or M/F$\star$)

```{r}

# naming factors
# dat_long$Comp_type <-  factor(dat_long$Comp_type, 
#                                  levels = c("one_castrated", "both_normal"),
#                                  labels = c("one_castrated", "both_normal") )

dat_long$Comp_type_Sex1 <- factor(dat_long$Comp_type_Sex, 
                                 levels = c("one_castrated_Male", "both_normal_Male",
                                            "one_castrated_Female", "both_normal_Female"),
                                 labels = c("Male sterlized/\nFemale normal",
                                            "Male normal/\nFemale normal (B)",
                                            "Male normal/\nFemale sterlized",
                                            "Male normal/\nFemale normal (A)") )

mod_comp_sex <-  rma.mv(yi, V = V_matrix_long, mod = ~ Comp_type_Sex1 -1 , random = list( ~1|Species_Latin, ~1|Study, ~1|Effect_ID, ~1|Obs ),data = dat_long, test = "t")
summary(mod_comp_sex) 
r2_ml(mod_comp_sex)
```

```{r}

d0 <- orchard_plot(mod_comp_sex, mod = "Comp_type_Sex1", xlab = "log response ratio (lnRR)", 
                   group = "Study", 
                   cb = T, angle = 90) +
  geom_vline(xintercept=2.5, size = 0.2)

d0
```

## Absolute effect size comparaion (M/F or F/M vs. M$\star$/F or F$\star$/M)

```{r}

# VCV matrix
abs_V_matrix_long <- impute_covariance_matrix(vi = dat_long$abs_vi, cluster = dat_long$Shared_control, r = 0.5)

abs_mod_comp_sex0 <-  rma.mv(abs_yi, V = abs_V_matrix_long, mod = ~ Comp_type_Sex1 , 
                             random = list( ~1|Species_Latin, ~1|Study, ~1|Effect_ID, ~1|Obs ),
                             data = dat_long,  test = "t",
                 sparse = TRUE)
summary(abs_mod_comp_sex0) 

abs_mod_comp_sex <-  rma.mv(abs_yi, V = abs_V_matrix_long, mod = ~ Comp_type_Sex1 -1 , 
                            random = list( ~1|Species_Latin, ~1|Study, ~1|Effect_ID, ~1|Obs), 
                            data = dat_long,  test = "t",
                 sparse = TRUE)
summary(abs_mod_comp_sex) 
r2_ml(abs_mod_comp_sex)

# visualizing results
d1 <- orchard_plot(abs_mod_comp_sex, mod = "Comp_type_Sex1", xlab = "absolute log response ratio (lnRR)", 
                   group = "Study", 
                   cb = T, angle = 90) +
  geom_vline(xintercept=2.5, size = 0.2)

d1
```

## Contrasting M/F and M/F$\star$

```{r}
# female
female_dat_log <- dat_long %>% filter(Sex == "Female")
f_dat_log<- female_dat_log %>% group_by(Effect_ID) %>% summarise(yi2 = abs_yi[2] - abs_yi[1],
                                                     vi2 = abs_vi[1] + abs_vi[2] -
                                                       0.5*sqrt(abs_vi[1]*abs_vi[2]),
                                                     Species_Latin = Species_Latin[1],
                                                     Study = Study[1],
                                                     Shared_control = Shared_control[1])

# variance covariance matrix
V_matrix_long1 <- impute_covariance_matrix(vi = f_dat_log$vi2, cluster = f_dat_log$Shared_control, r = 0.5)

# we can run - some heteroscad models
# this does not improve model
f_mod_long <-  rma.mv(yi2, V = V_matrix_long1, 
                 random = list(~1|Species_Latin, 
                               ~1|Study, 
                               ~1|Effect_ID), 
                 data = f_dat_log, test = "t", sparse = TRUE)
summary(f_mod_long) 
i2_ml(f_mod_long)

# Pair figures
d2 <- ggplot(female_dat_log, aes(x = Comp_type, y = abs_yi)) + 
  geom_point(aes(size = sqrt(1/abs_vi), col = Comp_type), alpha = 0.5) +
  geom_line(aes(group = Effect_ID), alpha = 0.5) + 
  labs(y = "absolute log response ratio (lnRR)", x = "", size = "Precision (1/SE)") + 
  scale_x_discrete(labels = c("one_castrated" ="Male normal/\nFemale sterlized", "both_normal" = "Male normal/\nFemale normal")) +
  #xlim(c("one_castrated","both_normal"))+
  ylim(0, 1.25) + 
  scale_color_manual(values = c("#DDCC77", "#117733")) +
  coord_flip() +
  theme_bw() +
  guides(colour = "none") +
  theme(legend.position= c(1, 0), legend.justification = c(1, 0)) +
	theme(legend.title = element_text(size = 9)) +
	theme(legend.direction="horizontal") +
	theme(legend.background = element_blank()) +
	theme(axis.text.y = element_text(size = 10, colour ="black",
	                                                        hjust = 0.5,
	                                                        angle = 90))

d2


d3 <- orchard_plot(f_mod_long, 
                   xlab = "absolute log response ratio (lnRR)", 
                   group = "Study", 
                   cb = F, angle = 90) + 
  scale_fill_manual(values =  "#999933") +
  scale_colour_manual(values =  "#999933") +
  scale_x_discrete(labels = "Male normal/Female sterlized vs. \nMale normal/Female normal") +
  ylim(-0.9, 0.5)
d3
```

## Contrasting M/F and M$\star$/F

```{r}
# pair figure male  
male_dat_log <- dat_long %>% filter(Sex == "Male")

m_dat_log<- male_dat_log %>% group_by(Effect_ID) %>% summarise(yi2 = abs_yi[2] - abs_yi[1],
                                                     vi2 = abs_vi[1] + abs_vi[2] -
                                                       0.5*sqrt(abs_vi[1]*abs_vi[2]),
                                                     Species_Latin = Species_Latin[1],
                                                     Study = Study[1],
                                                     Shared_control = Shared_control[1])

# variance covariance matrix
V_matrix_long2 <- impute_covariance_matrix(vi = m_dat_log$vi2, cluster = m_dat_log$Shared_control, r = 0.5)

# we can run - some hetero-scad models
# this does not improve model
m_mod_long <-  rma.mv(yi2, V = V_matrix_long2, 
                 random = list(~1|Species_Latin, 
                               ~1|Study, 
                               ~1|Effect_ID), 
                 data = m_dat_log, test = "t")
summary(m_mod_long) 
i2_ml(m_mod_long)


d4 <- ggplot(male_dat_log, aes(x =Comp_type, y = abs_yi)) + 
  geom_point(aes(size = sqrt(1/abs_vi), col = Comp_type), alpha = 0.5) +
  geom_line(aes(group = Effect_ID), alpha = 0.5) + 
  labs(y = "absolute log response ratio (lnRR)", x = "", size = "Precision (1/SE)") + 
  scale_x_discrete(labels = c("one_castrated" ="Male sterlized/\nFemale normal", "both_normal" = "Male normal/\nFemale normal")) +
  ylim(0, 1.25) + 
  #coord_cartesian(xlim = c(0.5, 2.5)) +
  scale_color_manual(values = c("#88CCEE", "#CC6677")) +
  coord_flip() +
  theme_bw() +
  guides(colour = "none") +
  theme(legend.position= c(1, 0), legend.justification = c(1, 0)) +
	theme(legend.title = element_text(size = 9)) +
	theme(legend.direction="horizontal") +
	theme(legend.background = element_blank()) +
	theme(axis.text.y = element_text(size = 10, colour ="black",
	                                                        hjust = 0.5,
	                                                        angle = 90))

d4 

d5 <- orchard_plot(m_mod_long, xlab = "absolute log response ratio (lnRR)", 
                   group = "Study", 
                   cb = F, angle = 90) + 
   scale_fill_manual(values = "#332288") +
  scale_colour_manual(values = "#332288") +
scale_x_discrete(labels = "Male sterlized/Female normal vs. \nMale normal/Female normal") +
  ylim(-0.9, 0.5)

d5
```

## Figure: orchard plots - row and aboslute

```{r}

patch <- d0 + d1 + plot_layout()

patch +  plot_annotation(tag_levels = "A")
```


## Figure: contrasting and orchard plots

Related figures

```{r, eval = FALSE}
patch2 <- (d2/d4)| (d3/d5) + plot_layout()

patch2 +  plot_annotation(tag_levels = "A")
```

:::

# Contrasting sexes: all-combination data

::: panel-tabset

## Comparing M/F vs. M$\star$/F$\star$

```{r}

# naming factor
sdat_long$Comp_type <-  factor(sdat_long$Comp_type, 
                                 levels = c("both_castrated", "both_normal"),
                                 labels = c("Male sterlized/\nFemale sterlized",
                                            "Male normal/\nFemale normal") )

# VCV matrix
V_matrix_long <- impute_covariance_matrix(vi = sdat_long$vi, cluster = sdat_long$Shared_control, r = 0.5)

# correlaiton matrix for phylogeny
# tree <- read.tree(here("data/tree_rotl.tre"))
# tree <- compute.brlen(tree)
# cor_tree <- vcv(tree, corr = TRUE)

# without heteroscedasticity
mod_comp2 <-  rma.mv(yi, V = V_matrix_long, mod = ~ Comp_type - 1, random = list( ~1|Species_Latin, ~1|Study, ~1|Effect_ID, ~1|Obs),data = sdat_long, test = "t")
summary(mod_comp2) 

# without heteroscedasticity
mod_comp2b <-  rma.mv(yi, V = V_matrix_long, mod = ~ Comp_type, random = list( ~1|Species_Latin, ~1|Study, ~1|Effect_ID, ~1|Obs),data = sdat_long, test = "t")
summary(mod_comp2b) 
r2_ml(mod_comp2b)

# with heteroscedasticity
mod_comp2c <-  rma.mv(yi, V = V_matrix_long, 
                     mod = ~ Comp_type, 
                     random = list( ~1|Species_Latin, ~1|Study, ~Comp_type|Effect_ID),
                    rho = 0, struct = "HCS",
                     data = sdat_long, test = "t")
summary(mod_comp2c) 

# Comparing models with and without heteroscedasticity
AIC(mod_comp2, mod_comp2c)


# visualizing results
f1 <- orchard_plot(mod_comp2c, mod = "Comp_type", 
                   xlab = "log response ratio (lnRR)", 
                   group = "Study", 
                   angle = 90) +
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  scale_colour_manual(values = c("#D55E00", "#009E73")) 

f1
```

## Absolute effect size comparaion (M/F vs. M$\star$/F$\star$)

```{r}

# VCV matrix
abs_V_matrix_long <- impute_covariance_matrix(vi = sdat_long$abs_vi, cluster = sdat_long$Shared_control, r = 0.5)


# with heteroscedasticity
mod_comp3 <-  rma.mv(abs_yi, V = abs_V_matrix_long, 
                     mod = ~ Comp_type - 1, 
                     random = list( ~1|Species_Latin, ~1|Study, ~Comp_type|Effect_ID),
                    rho = 0, struct = "HCS",
                     data = sdat_long, test = "t")
summary(mod_comp3) 

# with heteroscedasticity
mod_comp3b <-  rma.mv(abs_yi, V = abs_V_matrix_long, 
                      mod = ~ Comp_type, 
                      random = list( ~1|Species_Latin, ~1|Study, ~Comp_type|Effect_ID),
                      rho = 0, struct = "HCS",
                      data = sdat_long, test = "t")
summary(mod_comp3b)

# this function does not work with heterogenious variance
#r2_ml(mod_comp3b) 

# without heteroscedasticity
mod_comp3c <-  rma.mv(abs_yi, V = abs_V_matrix_long, 
                      mod = ~ Comp_type, 
                      random = list( ~1|Species_Latin, ~1|Study, ~1|Effect_ID),
                      #rho = 0, struct = "HCS",
                      data = sdat_long, test = "t")

# Comparing models with and without heteroscedasticity
AIC(mod_comp3, mod_comp3c)

# visualizing results
f2 <- orchard_plot(mod_comp3b, mod = "Comp_type", 
                   xlab = "absolute log response ratio (lnRR)", 
             group = "Study", 
             angle = 90) +
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  scale_colour_manual(values = c("#D55E00", "#009E73")) 

f2
```

## Figure: orchard plot (all combination)

```{r}

patch3 <- f1 / f2 + plot_layout()

patch3 +  plot_annotation(tag_levels = "A")
```

:::

# PART II: HEALTHSPAN ANALYSIS ON LITERATURE DATA

# Data preparation & processing

::: panel-tabset

## Healthspan data

```{r}
# remove odl data
dat_full <- read.csv(here("data", "healthspan", "healthspan3.csv"), na = c("", "NA"))

dat_full %>% 
  mutate_if(is.character, as.factor) -> dat

# Effect_ID is the unique identifier for the effect
dat$Effect_ID <- factor(1:nrow(dat))

effect_type <- ifelse(str_detect(dat$measurement_parameter, "rop"), "proportion", "other")


kable(dat, "html") %>% 
  kable_styling("striped", position = "left") %>% 
  scroll_box(width = "100%", 
    height = "250px")
```

## Calculating effect size for healthspan data

```{r}
# getting CV2 to get lnRR

dat %>% group_by(Study) %>% 
  summarise(cv2_cont = mean((Error_control_SD/Control_value)^2, na.rm = T), 
            cv2_trt = mean((Error_experimental_SD/Experimental_value)^2, na.rm = T), 
            n_cont = mean(Sample_size_control, na.rm = T), 
            n_trt =  mean(Sample_size_experimental, na.rm = T)) %>% 
  ungroup() %>% 
  summarise(cv2_cont = weighted.mean(cv2_cont, n_cont, na.rm = T), 
            cv2_trt = weighted.mean(cv2_trt, n_trt, na.rm = T)) -> cvs

# lnRR

# survival proportion using arcsin transformation = lnrrp
# using CV
dat$yi <- ifelse(effect_type == "other", lnrrm(dat$Experimental_value,
                                               dat$Control_value, 
                                               dat$Sample_size_experimental, 
                                               dat$Sample_size_control,
                                               cvs[["cv2_trt"]],
                                               cvs[["cv2_cont"]])[[1]],
                                         lnrrp(dat$Experimental_value, 
                                               dat$Control_value, 
                                               dat$Sample_size_experimental, 
                                               dat$Sample_size_control)[[1]])

dat$vi <- ifelse(effect_type == "other", lnrrm(dat$Experimental_value,
                                               dat$Control_value, 
                                               dat$Sample_size_experimental, 
                                               dat$Sample_size_control, 
                                               cvs[["cv2_trt"]],
                                               cvs[["cv2_cont"]])[[2]],
                                         lnrrp(dat$Experimental_value, 
                                               dat$Control_value, 
                                               dat$Sample_size_experimental, 
                                               dat$Sample_size_control)[[2]])

# for plotting without using CV

dat$vi2 <- ifelse(effect_type == "other", lnrrm2(dat$Experimental_value,
                                               dat$Control_value, 
                                               dat$Sample_size_experimental, 
                                               dat$Sample_size_control, 
                                               dat$Error_experimental_SD,
                                               dat$Error_control_SD)[[2]],
                                        lnrrp(dat$Experimental_value, 
                                              dat$Control_value, 
                                              dat$Sample_size_experimental, 
                                              dat$Sample_size_control)[[2]])



# flipping directions

dat$direction <- ifelse(dat$direction.of.improved.health == "Increased", 1, -1)

dat$yi <- dat$yi * dat$direction

```


:::

# Meta-analysis

## Main model

```{r}
# meta-analysis

VCV <- vcalc(vi = vi, 
             cluster = Study, 
             obs = Effect_ID, #subgroup = Measure,
             data = dat, 
             rho = 0.5)

mod <-  rma.mv(yi = yi, 
               V = VCV, 
               random = list(~1|Strain, 
                             ~ 1|Study, 
                             ~ 1|Effect_ID
                             ), 
               data = dat, 
               test = "t",
               sparse = TRUE,
               control=list(optimizer="optim", optmethod="Nelder-Mead")
)

summary(mod) 

round(i2_ml(mod),5) # almost no phylogenetic effect

# visualizing the result
orchard_plot(mod, xlab = "log response ratio (lnRR)", group = "Study")
```


# Meta-regression

::: panel-tabset


## Sex difference (`Sex`)

```{r}

mod1 <-  rma.mv(yi = yi, 
                V = VCV, 
                mod = ~ Sex - 1, 
                random = list(~ 1|Strain, 
                              ~ 1|Study, 
                              ~ 1|Effect_ID), 
                #struct = "DIAG",
                data = dat, 
                test = "t",
                sparse = TRUE,
                control=list(optimizer="optim", optmethod="BFGS")
)
summary(mod1) 

# visualizing the result

mod_healthspan_sex <- mod_results(mod1, group = "Study", mod = "Sex", data = dat)

#saveRDS(mod_healthspan_sex, here("Rdata", "fig", "mod_healthspan_sex.rds"))

#mod_healthspan_sex <- readRDS(here("Rdata", "fig", "mod_healthspan_sex.rds"))        
        
orchard_plot(mod_healthspan_sex, mod = "Sex", 
             xlab = "log response ratio (lnRR)", group = "Study", cb = F) # colour = T)


# attr(lm_result, "class") <- NULL

# orchard plot

main <- mod_results(mod, group = "Study")
attr(main, "class") <- NULL
main$mod_table$name <- gsub("Intrcpt", "Overall", main$mod_table$name)
main$mod_table$name <- factor(main$mod_table$name)
main$data$moderator <- gsub("Intrcpt", "Overall", main$data$moderator)
main$data$moderator <- factor(main$data$moderator)

class(main) <- c("orchard", "data.frame")

p_overall <- orchard_plot(main, xlab = "log response ratio (lnRR)", angle = 0, group = "Study") + ylim(-2.2,2)


sex_diff <- mod_results(mod1, mod = "Sex", group = "Study")


p_sex_diff <-orchard_plot(sex_diff, mod = "Sex", 
                          xlab = "log response ratio (lnRR)", group = "Study", angle = 0, cb = F) + ylim(-2.2,2)

combined <- submerge(sex_diff, main)

# changing the name (intercept) to:
# TODO - this should be done in the orchard_plot function
combined$mod_table$name <- gsub("Intrcpt", "Overall", combined$mod_table$name)
combined$mod_table$name <- factor(combined$mod_table$name)

combined$data$moderator <- gsub("Intrcpt", "Overall", combined$data$moderator)


orchard_plot(combined,
             xlab = "log response ratio (lnRR)", group = "Study", angle = 0, cb = F) + 
  scale_colour_manual(values = rev(c("#999999", "#88CCEE", "#CC6677"))) +
  scale_fill_manual(values = rev(c("#999999", "#88CCEE", "#CC6677")))

```

## Measuremeta types (`Sub.measure`)

```{r}

mod2 <-  rma.mv(yi = yi, 
                V = VCV, 
                mod = ~ Sub.measure - 1, 
                random = list(~ 1|Strain, 
                              ~ 1|Study, 
                              ~ 1|Effect_ID), 
                data = dat, 
                test = "t",
                sparse = TRUE,
                control=list(optimizer="optim", optmethod="BFGS")
)
summary(mod2) 


# visualizing the result
orchard_plot(mod2, mod = "Sub.measure", 
             xlab = "log response ratio (lnRR)", group = "Study", angle = 45)

```

## Sex diff. x meausremetn types (`MesSex`)

```{r}

# Measure x Sex
# need to name up Sub.measure
dat$Sub.measure <- factor(dat$Sub.measure, 
                          levels = levels(dat$Sub.measure),
                          labels = c("Cardiac\nfunction/\npathology", "Cardiac size", "Cognition", "Frailty",
                                     "Immune\nfunction", "Metabolism", "Muscle size", "Non-tumor\npathology",
                                     "Sensory\nfunction", "Strength/\nbalance", "Tumor\nmammory", "Tumor\nnonmammory",
                                     "Voluntary\nactivity"))


dat$MesSex <- paste0(dat$Sub.measure, "_", dat$Sex)

dat$Measurement.type <- factor(dat$Measurement.type,
                           levels = levels(as.factor(dat$Measurement.type)),
                           labels = levels(as.factor(dat$Measurement.type))
                           )


mod3 <-  rma.mv(yi = yi, 
                 V = vi, 
                 mod = ~ MesSex - 1, 
                 random = list(~ 1|Strain, 
                               ~ 1|Study, 
                               ~ 1|Effect_ID), 
                 data = dat, 
                 test = "t",
                 sparse = TRUE,
                 control=list(optimizer="optim", optmethod="BFGS")
)

summary(mod3)


# visualizing the result

orchard_plot(mod3, mod = "MesSex", 
             xlab = "log response ratio (lnRR)", group = "Study", angle = 0, cb = F)

```

## Figure code

```{r}
#| code-fold: true
#| eval: false

# figures


# some experiments 

res3 <- mod_results(mod3, mod = "MesSex", group = "Study")

mod_table_m <- res3$mod_table[c(2,4,6, 7, 10, 12, 14, 16, 18, 21, 23), ]
mod_table_f <- res3$mod_table[c(1,3,5, 8, 9, 11, 13, 15, 17, 19, 20, 22), ]

data_m <- res3$data[ !is.na(match(res3$data$moderator, mod_table_m$name)), ]
data_f <- res3$data[ !is.na(match(res3$data$moderator, mod_table_f$name)), ]
  
res3_male <- list(mod_table = mod_table_m, data = data_m)
res3_female <- list(mod_table = mod_table_f, data = data_f)

# changing names
# male
res3_male$mod_table$name <- gsub("_Male", "", res3_male$mod_table$name)
res3_male$mod_table$name <- factor(res3_male$mod_table$name)

res3_male$data$moderator <- gsub("_Male", "", res3_male$data$moderator)

# female
res3_female$mod_table$name <- gsub("_Female", "", res3_female$mod_table$name)
res3_female$mod_table$name <- factor(res3_female$mod_table$name)

res3_female$data$moderator <- gsub("_Female", "", res3_female$data$moderator)

class(res3_male) <- c("orchard", "data.frame")
class(res3_female) <- c("orchard", "data.frame")





p_male <- orchard_plot(res3_male, mod = "MesSex", 
             xlab = "log response ratio (lnRR)", group = "Study", angle = 0, cb = F) + labs(title = "Male") + ylim(-2.2,2)


# p_male <- p_male + plot_annotation(title = "Male",
#                          theme = theme(plot.title = element_text(size = 20)))

p_female <- orchard_plot(res3_female, mod = "MesSex", 
             xlab = "log response ratio (lnRR)", group = "Study", angle = 0, cb = F) + labs(title = "Female") + ylim(-2.2,2)

# p_female <- p_female + plot_annotation(title = "Female",
#                          theme = theme(plot.title = element_text(size = 20)))

p_overall + p_sex_diff + p_female + p_male +  plot_layout(widths = c(2, 2), heights = c(1,2.5)) 


# creating a forest plot using dat

str(dat)

# selecting

fdat <- dat %>% select(Study, Measure, Effect_ID, Measurement.type, Sub.measure, yi, vi)

# add lower.ci and upper.ci

fdat <- dat %>% mutate(lower.ci = yi - 1.96*sqrt(vi), upper.ci = yi + 1.96*sqrt(vi))

# p_forest <- ggplot(data = fdat, aes(x = yi, y = Measurement.type)) +
#   geom_errorbarh(aes(xmin = lower.ci, xmax = upper.ci, colour = Sub.measure), 
#                  height = 1, show.legend = TRUE, size = 1, alpha = 0.8, position = position_dodge2(width = 1)) +
#   geom_point(aes(col = Sub.measure), fill = "white", size = 2, shape = 21, position =position_dodge2(width = 1)) +
#   geom_vline(xintercept = 0, linetype = 2, colour = "black", alpha = 0.3) +
#   geom_vline(xintercept = mod$b, linetype = 2, colour = "red", alpha = 0.3) +
#   labs(x = "lnRR (effect size)", y = "")

fdat$Measurement.type <- factor(
  fdat$Measurement.type,
  levels = unique(fdat$Measurement.type)
)

dodge <- position_dodge2(width = 0.6, preserve = "single")

p_forest <- ggplot(data = fdat, aes(x = yi, y = Measurement.type)) +
  geom_errorbarh(
    aes(xmin = lower.ci, xmax = upper.ci, colour = Sub.measure), 
    height = 0.3,
    position = dodge,
    size = 1, alpha = 0.8
  ) +
  geom_point(
    aes(colour = Sub.measure),
    fill = "white",
    shape = 21,
    size = 2,
    position = dodge
  ) +
  geom_vline(xintercept = 0, linetype = 2, colour = "black", alpha = 0.3) +
  geom_vline(xintercept = mod$b, linetype = 1, linewidth = 2, colour = "red", alpha = 0.3) +
  scale_y_discrete(expand = c(0,0)) +
  # Rename legend title
  scale_colour_discrete(name = "Sub-measure") +
  labs(x = "lnRR (effect size)", y = "") +
  theme_minimal() +
  # Place legend below plot
  theme(
    legend.position = "bottom",
    axis.text.y = element_text(size = 9)
  )

p_forest

########################
# different drawing .... 
########################

# meta-analytic mean

res <- mod_results(mod, group = "Study", data = dat)[[1]]

saveRDS(res, here("Rdata", "fig", "res.rds"))

# example....
dat$MestypeSex <- paste0(dat$Measurement.type, "_", dat$Sex)

hdat <- escalc(yi = yi, vi = vi2, data = dat)

hdat$es_ID <- factor(1:nrow(hdat))

# MesSex
idat <- aggregate(x = hdat, cluster = MesSex, obs = es_ID, rho = 0)

# MestypeSex

jdat <- aggregate(x = hdat, cluster = MestypeSex, obs = es_ID, rho = 0)

jdat$MestypeSex


# # adding non-aggredated ones
# cdat <- rbind(cdat, bdat[bdat$MesSex == "Frailty_Male", ], bdat[bdat$MesSex == "Sensory\nfunction_Female", ])
# 
# # replacing vi with vi2
# cdat$vi[cdat$MesSex == "Frailty_Male"] <- cdat$vi2[cdat$MesSex == "Frailty_Male"]
# cdat$vi[cdat$MesSex == "Sensory\nfunction_Female"] <- cdat$vi2[cdat$MesSex == "Sensory\nfunction_Female"]
# 
dim(dat)
dim(idat)
dim(jdat)

# CI1
idat$lower.ci <- idat$yi - sqrt(idat$vi) * qnorm(0.975) 
idat$upper.ci <- idat$yi + sqrt(idat$vi) *  qnorm(0.975)

jdat$lower.ci <- jdat$yi - sqrt(jdat$vi) * qnorm(0.975) 
jdat$upper.ci <- jdat$yi + sqrt(jdat$vi) *  qnorm(0.975)




# adding more informaition
idat %>% select(Sub.measure, yi, lower.ci, upper.ci, Sex) -> kdat
# adding more informaition
jdat %>% select(Measurement.type, yi, lower.ci, upper.ci, Sex) -> ldat

addition <- data.frame(Sub.measure = "Overall", yi =  NA, lower.ci = NA, upper.ci = NA, Sex = "Female")
addition1 <- data.frame(Measurement.type = "Overall", yi =  NA, lower.ci = NA, upper.ci = NA, Sex = "Female")


kdat <- rbind(kdat, addition)
ldat <- rbind(ldat, addition1)

# saving these data
saveRDS(kdat, here("Rdata", "fig", "kdat.rds"))
saveRDS(ldat, here("Rdata", "fig", "ldat.rds"))

####### Start here

res <- readRDS(here("Rdata", "fig", "res.rds"))
kdat <- readRDS(here("Rdata", "fig", "kdat.rds"))
ldat <- readRDS(here("Rdata", "fig", "ldat.rds"))


sum_data <- data.frame("x.diamond" = c(res$lowerCL,
                                       res$estimate ,
                                       res$upperCL,
                                       res$estimate ),
                       "y.diamond" = c(1,
                                       1 + 0.25,
                                       1,
                                       1 - 0.25)
)

# plotting Sub.measure
# looking at 
#dat$Sub.measure 
kdat$Sub.measure <- factor(kdat$Sub.measure,
                          levels = c( "Overall", 
                                      "Cardiac\nfunction/\npathology", 
                                      "Cardiac size", 
                                      "Cognition", 
                                      "Frailty",
                                      "Immune\nfunction", 
                                      "Metabolism", 
                                      "Muscle size", 
                                      "Non-tumor\npathology",
                                      "Sensory\nfunction", 
                                      "Strength/\nbalance",
                                      "Tumor\nmammory", 
                                      "Tumor\nnonmammory",
                                      "Voluntary\nactivity"),
                          labels = c("Overall", 
                                     "Cardiac\nfunction/\npathology", 
                                     "Cardiac size", 
                                     "Cognition", 
                                     "Frailty",
                                     "Immune\nfunction", 
                                     "Metabolism", 
                                     "Muscle size", 
                                     "Non-tumor\npathology",
                                     "Sensory\nfunction", 
                                     "Strength/\nbalance",
                                     "Tumor\nmammory", 
                                     "Tumor\nnonmammory",
                                     "Voluntary\nactivity"))

mes_sex <- ggplot(data = kdat, aes(x = yi, y = Sub.measure)) +
  geom_errorbarh(aes(xmin = lower.ci, xmax = upper.ci, colour = Sex), 
                 height = 0, show.legend = TRUE, linewidth = 4.5, 
                 alpha = 0.8, position =position_dodge(width = 0.75)) +
  geom_point(aes(col = Sex), fill = "white", size = 2, shape = 21, position =position_dodge2(width = 0.75)) +
  geom_vline(xintercept = 0, linetype = 2, colour = "black", alpha = 0.3) +
  geom_vline(xintercept = res$estimate, linetype = 1, colour = "red", alpha = 0.3) +
  xlim(-1.6, 1.6) +
  #creating 95% prediction intervals
  geom_segment(data = res, ggplot2::aes(x = lowerPR, y = 1, xend = upperPR, yend = 1, group = name)) +
  # creating diamonsts (95% CI)
  ggplot2::geom_polygon(data = sum_data, ggplot2::aes(x = x.diamond, y = y.diamond), fill = "red") +
  
  theme_bw() +
  scale_color_manual(values = c("#CC6677", "#88CCEE")) +
  labs(x = "lnRR (effect size)", y = "", colour = "Sex") +
  theme(legend.position = c(0.95, 0.85),
        legend.justification = c(1, 0)) +
  theme(legend.title = element_text(size = 9)) +
  #theme(legend.direction="horizontal") +
  theme(axis.text.y = element_blank()) +
  theme(axis.text.y = element_text(size = 10, colour ="black",
                                   hjust = 0.5)) 



# icons 

filenames <- list.files(here("icons", "literature"), pattern=".png", full.names=TRUE)
ldf <- lapply(filenames, readPNG)
names(ldf) <- substr(filenames, 99, 99+60)

mes_sex1 <- mes_sex +
  annotation_custom(rasterGrob(ldf$Mus_musculus.png), xmin = -2, xmax = -1, ymin = 12, ymax = 13.5) +
  annotation_custom(rasterGrob(ldf$Rattus_argentiventer.png), xmin = -1.5, xmax = -0.5, ymin = 11.5, ymax = 13)

mes_sex1
 

## need to do a version for Measurement.type

#gdat$S
ldat$Measurement.type <- factor(ldat$Measurement.type,
                           levels = c("Overall",
                                      "Adrenal-Cortical adenoma",
                                      "Autoshaping learning test",
                                      "balance on a dowel",
                                      "Barnes maze test",
                                      "cardiac fibrosis",
                                      "Cardiac pathology",
                                      "Cardiomyocyte size",
                                      "E/A ratio",
                                      "Ejection fraction",
                                      "Energy expenditure",
                                      "fractional shortening",
                                      "Frailty score",
                                      "Glucose tolerance",
                                      "Grip strength",
                                      "Harderian adenoma",
                                      "Heart size",
                                      "inhibitory avoidance test",
                                      "Insulin sensitivity",
                                      "Kidney pathology",
                                      "left ventricle size",
                                      "Left Ventricular Isovolumic Relaxation Time",
                                      "Liver pathology",
                                      "Mammary pathology",
                                      "Morris water maze",
                                      "nonthymic lymphosarcoma",
                                      "novel object recognition",
                                      "Open field test",
                                      "pituitary tumors",
                                      "Polyarteritis",
                                      "Proportion with hypophyseal adenoma",
                                      "Proportion with tumors ",
                                      "Pulmonary adenoma",
                                      "Quadriceps size",
                                      "RAM memory test",
                                      "Reticulum cell sarcoma",
                                      "rotarod",
                                      "Skeletal muscle fiber size",
                                      "Smell preference",
                                      "superficial skin and subcutaneous tumor not mammary",
                                      "T cell function test",
                                      "T maze test",
                                      "thymic lymphomas",
                                      "Total activity dark period",
                                      "total non-neoplastic lesions",
                                      "Treamill",
                                      "vision presence of cataracts",
                                      "voluntary activity assessment",
                                      "voluntary wheel running",
                                      "water radial arm maze test",
                                      "Y maze testing"),
                              labels = c("Overall",
                                         "Adrenal-cortical adenoma",
                                         "Autoshaping learning test",
                                         "Balance on a dowel",
                                         "Barnes maze test",
                                         "Cardiac fibrosis",
                                         "Cardiac pathology",
                                         "Cardiomyocyte size",
                                         "E/A ratio",
                                         "Ejection fraction",
                                         "Energy expenditure",
                                         "Fractional shortening",
                                         "Frailty score",
                                         "Glucose tolerance",
                                         "Grip strength",
                                         "Harderian adenoma",
                                         "Heart size",
                                         "Inhibitory avoidance test",
                                         "Insulin sensitivity",
                                         "Kidney pathology",
                                         "left ventricle size",
                                         "Left ventricular isovolumic relaxation time",
                                         "Liver pathology",
                                         "Mammary pathology",
                                         "Morris water maze",
                                         "Nonthymic lymphosarcoma",
                                         "Novel object recognition",
                                         "Open field test",
                                         "Pituitary tumors",
                                         "Polyarteritis",
                                         "Proportion with hypophyseal adenoma",
                                         "Proportion with tumors",
                                         "Pulmonary adenoma",
                                         "Quadriceps size",
                                         "RAM memory test",
                                         "Reticulum cell sarcoma",
                                         "Rotarod",
                                         "Skeletal muscle fiber size",
                                         "Smell preference",
                                         "Superficial skin and subcutaneous tumor not mammary",
                                         "T cell function test",
                                         "T maze test",
                                         "Thymic lymphomas",
                                         "Total activity dark period",
                                         "Total non-neoplastic lesions",
                                         "Treamill",
                                         "Vision presence of cataracts",
                                         "Voluntary activity assessment",
                                         "voluntary wheel running",
                                         "Water radial arm maze test",
                                         "Y maze testing")
                           )

mestype_sex <- ggplot(data = ldat, aes(x = yi, y = Measurement.type)) +
  geom_errorbarh(aes(xmin = lower.ci, xmax = upper.ci, colour = Sex), 
                 height = 0, show.legend = TRUE, linewidth = 2, 
                 alpha = 0.8, position =position_dodge(width = 0.75)) +
  geom_point(aes(col = Sex), fill = "white", size = 2, shape = 21, position =position_dodge2(width = 0.75)) +
  geom_vline(xintercept = 0, linetype = 2, colour = "black", alpha = 0.3) +
  geom_vline(xintercept = res$estimate, linetype = 1, colour = "red", alpha = 0.3) +
  xlim(-4, 3) +
  #creating 95% prediction intervals
  geom_segment(data = res, ggplot2::aes(x = lowerPR, y = 1, xend = upperPR, yend = 1, group = name)) +
  # creating diamonsts (95% CI)
  ggplot2::geom_polygon(data = sum_data, ggplot2::aes(x = x.diamond, y = y.diamond), fill = "red") +
  
  theme_bw() +
  scale_color_manual(values = c("#CC6677", "#88CCEE")) +
  labs(x = "lnRR (effect size)", y = "", colour = "Sex") +
  theme(legend.position = c(0.95, 0.85),
        legend.justification = c(1, 0)) +
  theme(legend.title = element_text(size = 9)) +
  #theme(legend.direction="horizontal") +
  theme(axis.text.y = element_blank()) +
  theme(axis.text.y = element_text(size = 10, colour ="black",
                                   hjust = 0.5)) 

mestype_sex

# icons 

filenames <- list.files(here("icons", "literature"), pattern=".png", full.names=TRUE)
ldf <- lapply(filenames, readPNG)
names(ldf) <- substr(filenames, 99, 99+60)

mestype_sex1 <- mestype_sex +
  annotation_custom(rasterGrob(ldf$Mus_musculus.png), xmin = -1.5*2.5, xmax = -1*2.5, ymin = 13.5*3.5, ymax = 14.5*3.5) +
  annotation_custom(rasterGrob(ldf$Rattus_argentiventer.png), xmin = -1*2.5, xmax = -0.5*2.5, ymin = 13*3.5, ymax = 14*3.5)

mestype_sex1
```


:::


# Publication bais & sensitivity analysis

::: panel-tabset
## Funnel plot

```{r}
# raw funnel plot
# funnel plot - 
funnel(mod)

funnel(mod3)

```

## Small-study effect: uni-moderaotor

```{r}

dat$Effective_N <- 1/dat$Sample_size_experimental + 1/dat$Sample_size_control

egger_hs <-  rma.mv(yi = yi, 
                 V = vi, 
                 mod = ~sqrt(Effective_N), 
                 random = list(~ 1|Strain, 
                               ~ 1|Study, 
                               ~ 1|Effect_ID), 
                 data = dat, 
                 test = "t",
                 sparse = TRUE,
                 control=list(optimizer="optim", optmethod="BFGS")
)

summary(egger_hs)


```

## Decline effect (time lag bias): uni-moderator

```{r}

dat$Year <- as.numeric(str_extract(as.character(dat$Study),"[:digit:][:digit:][:digit:][:digit:]"))

decline <-  rma.mv(yi = yi, 
                 V = vi, 
                 mod = ~ Year, 
                 random = list(~ 1|Strain, 
                               ~ 1|Study, 
                               ~ 1|Effect_ID), 
                 data = dat, 
                 test = "t",
                 sparse = TRUE,
                 control=list(optimizer="optim", optmethod="BFGS")
)

summary(decline)
```

## Leave-one-study-out analysis

```{r}
#| eval: false
# The function for leave-one-study-out

dat$Study <- as.factor(dat$Study)

LeaveOneOut_effectsize <- list()
for(i in 1:length(levels(dat$Study))){
  dat1 <- dat[dat$Study != levels(dat$Study)[i], ]
  
  LeaveOneOut_effectsize[[i]] <- rma.mv(yi = yi, 
                 V = vi, 
                 random = list(~ 1|Strain, 
                               ~ 1|Study, 
                               ~ 1|Effect_ID), 
                 data = dat1, 
                 test = "t",
                 sparse = TRUE,
                 control=list(optimizer="optim", optmethod="BFGS")
  )
                 
}


# writing function for extracting est, ci.lb, and ci.ub from all models
est.func <- function(mod){
  df <- data.frame(est = mod$b, lower = mod$ci.lb, upper = mod$ci.ub)
  return(df)
}

#using dplyr to form data frame
MA_LOO <- lapply(LeaveOneOut_effectsize, function(x) est.func(x))%>% bind_rows %>% mutate(left_out = levels(dat$Study))


saveRDS(MA_LOO,file = here("Rdata", "literature","MA_LOO2.rds"))
```

```{r}
#telling ggplot to stop reordering factors
MA_LOO <- readRDS(file = here("Rdata",  "literature", "MA_LOO2.rds"))

MA_LOO$left_out<- as.factor(MA_LOO$left_out)
MA_LOO$left_out<-factor(MA_LOO$left_out, levels = MA_LOO$left_out)


#plotting
leaveoneout_E <- ggplot(MA_LOO) +
  geom_hline(yintercept = 0, lty = 2, lwd = 1) +
  geom_hline(yintercept = mod$ci.lb, lty = 3, lwd = 0.75, colour = "black") +
  geom_hline(yintercept = mod$b, lty = 1, lwd = 0.75, colour = "black") +
  geom_hline(yintercept = mod$ci.ub, lty = 3, lwd = 0.75, colour = "black") +
  geom_pointrange(aes(x = left_out, y = est, ymin = lower, ymax = upper)) +
  xlab("Study left out") + 
  ylab("lnRR, 95% CI") + 
  coord_flip() +
  theme(panel.grid.minor = element_blank())+
  theme_bw() + theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor.x = element_blank() ) +
  theme(axis.text.y = element_text(size = 6))

leaveoneout_E
```
:::


# PART III: LIFESPAN ANALYSIS ON ZOO DATA

# Data preparation & processing

::: panel-tabset

## Loading data

```{r}
#| warning: false
#| message: false

# main data
dat0 <- read_csv(here("data", "zoo", "resultsBaSTApost2005oldFormatFeb2025.csv"), na = c("", "NA"), show_col_types = FALSE)

# phylogeny
load(here("Rdata", "zoo", "maxCredTree.RData"))

tree <- maxCred 

# taxonomy
tax <- read.csv(here("data", "zoo", "FinalTranslTab.csv"))

dat0 %>% left_join(tax, by = c("species" = "ZIMSspecies")) -> dat_full

# talking out species with no data (Pseudocheirus peregrinus = likely to be mistaks in data)
dat_full %>% 
  # filter(
  # species != "Chrysocyon brachyurus" &
  #                   species != "Crocuta crocuta" &
  #                   species != "Neofelis nebulosa" &
  #                   species != "Panthera uncia" &
  #                   species != "Pseudocheirus peregrinus") %>% 
  mutate(phylogeny = gsub(" ", "_", vertlifeSpecies)) -> dat

# adding Cervus canadensis
# dat$vertlifeSpecies[which(dat$species == "Cervus canadensis")] <-"Cervus canadensis"
# dat$phylogeny[which(dat$species == "Cervus canadensis")] <-"Cervus_canadensis"

# fixing species name
#dat$species[dat$species == "Equus asinus"] <- "Equus_africanus"
dat$species[dat$species == "Aonyx cinereus"] <- "Aonyx cinerea"
#dat$species[dat$species == "Bubalus bubalis"] <- "Bubalus arnee"


# life span data 
to_drop <-
  tree$tip.label[which(!(tree$tip.label %in% unique(dat$phylogeny)))]

tree <- drop.tip(tree, to_drop)

# checking the number of spp
#length(tree$tip.label)
tree <- as.ultrametric(tree)

#tree <- compute.brlen(tree)
cor_tree <- vcv(tree, corr = TRUE)
```


## Preparing data set (contraception vs. normal)

```{r}
##############################################
# data sets comparing normal vs. contraception 
##############################################

# male surgical

dat_m_surg <- dat %>% filter(is.na(Male_Surgical_Contra_Mean) == FALSE, is.na(Male_Surgical_NoContra_Mean) == FALSE) %>% 
  mutate(M_control_m = Male_Surgical_NoContra_Mean,
         M_control_sd = sqrt(Male_Surgical_NoContra_N)*Male_Surgical_NoContra_SE,
         M_control_n = Male_Surgical_NoContra_N,
         M_surgical_m = Male_Surgical_Contra_Mean,
         M_surgical_sd = sqrt(Male_Surgical_Contra_N)*Male_Surgical_Contra_SE,
         M_surgical_n = Male_Surgical_Contra_N,
         sex = "male",
         type = "surgical")

dat_m_surg <- escalc("ROM", 
              m1i = M_surgical_m,
              m2i = M_control_m,
              sd1i = M_surgical_sd,
              sd2i = M_control_sd,
              n1i = M_surgical_n,
              n2i = M_control_n,
              data = dat_m_surg,
              )

#  male hormonal
dat_m_horm <- dat %>% filter(is.na(Male_Hormonal_Contra_Mean) == FALSE, is.na(Male_Hormonal_NoContra_Mean) == FALSE) %>% 
  mutate(M_control_m = Male_Hormonal_NoContra_Mean,
         M_control_sd = sqrt(Male_Hormonal_NoContra_N)*Male_Hormonal_NoContra_SE,
         M_control_n =Male_Hormonal_NoContra_N,
         M_hormonal_m = Male_Hormonal_Contra_Mean,
         M_hormonal_sd = sqrt(Male_Hormonal_Contra_SE)*Male_Hormonal_Contra_N,
         M_hormonal_n = Male_Hormonal_Contra_N,
         sex = "male",
         type = "hormonal")

dat_m_horm <- escalc("ROM", 
                     m1i = M_hormonal_m,
                     m2i = M_control_m,
                     sd1i = M_hormonal_sd,
                     sd2i = M_control_sd,
                     n1i = M_hormonal_n,
                     n2i = M_control_n,
                     data = dat_m_horm,
)


# female hormonal data 

dat_f_horm <- dat %>% filter(is.na(Female_Hormonal_Contra_Mean) == FALSE, is.na(Female_Hormonal_NoContra_Mean) == FALSE) %>% 
  mutate(F_control_m = Female_Hormonal_NoContra_Mean,
         F_control_sd = sqrt(Female_Hormonal_NoContra_N)*Female_Hormonal_NoContra_SE,
         F_control_n = Female_Hormonal_NoContra_N,
         F_hormonal_m = Female_Hormonal_Contra_Mean,
         F_hormonal_sd = sqrt(Female_Hormonal_Contra_N)*Female_Hormonal_Contra_SE,
         F_hormonal_n = Female_Hormonal_Contra_N,
         sex = "female",
         type = "hormonal")

dat_f_horm <- escalc("ROM", 
                     m1i = F_hormonal_m,
                     m2i = F_control_m,
                     sd1i = F_hormonal_sd,
                     sd2i = F_control_sd,
                     n1i = F_hormonal_n,
                     n2i = F_control_n,
                     data = dat_f_horm,
)

# female surgical data

dat_f_surg<- dat %>% filter(is.na(Female_Surgical_Contra_Mean) == FALSE, is.na(Female_Hormonal_NoContra_Mean) == FALSE) %>% 
  mutate(F_control_m = Female_Surgical_NoContra_Mean,
         F_control_sd = sqrt(Female_Surgical_NoContra_N)*Female_Surgical_NoContra_SE,
         F_control_n = Female_Surgical_NoContra_N,
         F_surgical_m = Female_Surgical_Contra_Mean,
         F_surgical_sd = sqrt(Female_Surgical_Contra_N)*Female_Surgical_Contra_SE,
         F_surgical_n = Female_Surgical_Contra_N,
         sex = "female",
         type = "surgical")


dat_f_surg <- escalc("ROM", 
                     m1i = F_surgical_m,
                     m2i = F_control_m,
                     sd1i = F_surgical_sd,
                     sd2i = F_control_sd,
                     n1i = F_surgical_n,
                     n2i = F_control_n,
                     data = dat_f_surg,
)

rbind(
dat_m_horm[ , c(1, 27, 28, 35:38)], # 1
dat_m_surg[ ,c(1, 27, 28, 35:38)], # 2
dat_f_horm[ , c(1, 27, 28, 35:38)], # 3 
dat_f_surg[ ,c(1, 27, 28, 35:38)] # 4
) -> dat_all

# observation id
dat_all$obs_id <- factor(1:nrow(dat_all))

# sex type combined
dat_all %>% mutate(sex_type = paste(sex, type, sep = "_")) -> dat_all

#write_csv(dat_all, here("data", "zoo", "effect1.csv"))
```

## Preparing data set (sex diff)


```{R}
######################################
# data sets looking at sex differences
######################################

# female normal vs. male surgical (1)

dat_fm_ns <- dat %>% filter(is.na(Female_Surgical_NoContra_Mean) == FALSE, 
                            is.na(Male_Surgical_Contra_Mean) == FALSE) %>% 
  transmute(F_normal_m = Female_Surgical_NoContra_Mean,
         F_normal_sd = sqrt(Female_Surgical_NoContra_N)*Female_Surgical_NoContra_SE,
         F_normal_n = Female_Surgical_NoContra_N,
         M_surgical_m = Male_Surgical_Contra_Mean,
         M_surgical_sd = sqrt(Male_Surgical_Contra_N)*Male_Surgical_Contra_SE,
         M_surgical_n = Male_Surgical_Contra_N,
         species = species,
         phylogeny = phylogeny,
         category = "F normal/M surgical"
         )

dat_fm_ns <- escalc("ROM", 
              m1i = F_normal_m,
              m2i = M_surgical_m,
              sd1i = F_normal_sd,
              sd2i = M_surgical_sd,
              n1i = F_normal_n,
              n2i = M_surgical_n,
              data = dat_fm_ns,
              )


# female hormonal vs. male normal (2)

dat_fm_hn <- dat %>% filter(is.na(Female_Hormonal_Contra_Mean) == FALSE, 
                            is.na(Male_Hormonal_NoContra_Mean) == FALSE) %>% 
  transmute(F_hormonal_m = Female_Hormonal_Contra_Mean,
         F_hormonal_sd = sqrt(Female_Hormonal_Contra_N)*Female_Hormonal_Contra_SE,
         F_hormonal_n = Female_Hormonal_Contra_N,
         M_normal_m = Male_Hormonal_NoContra_Mean,
         M_normal_sd = sqrt(Male_Hormonal_NoContra_N)*Male_Hormonal_NoContra_SE,
         M_normal_n = Male_Hormonal_NoContra_N,
         species = species,
         phylogeny = phylogeny,
         category = "F hormonal/M normal"
         )

dat_fm_hn <- escalc("ROM", 
              m1i = F_hormonal_m,
              m2i = M_normal_m,
              sd1i = F_hormonal_sd,
              sd2i = M_normal_sd,
              n1i = F_hormonal_n,
              n2i = M_normal_m,
              data = dat_fm_hn,
              )



# female surgical vs. male normal (3)

dat_fm_sn <- dat %>% filter(is.na(Female_Surgical_Contra_Mean) == FALSE,
                            is.na(Male_Surgical_NoContra_Mean) == FALSE) %>%
  transmute(F_surgical_m = Female_Surgical_Contra_Mean,
         F_surgical_sd = sqrt(Female_Surgical_Contra_N)*Female_Surgical_Contra_SE,
         F_surgical_n = Female_Surgical_Contra_N,
         M_normal_m = Male_Surgical_NoContra_Mean,
         M_normal_sd = sqrt(Male_Surgical_NoContra_N)*Male_Surgical_NoContra_SE,
         M_normal_n = Male_Surgical_NoContra_N,
         species = species,
         phylogeny = phylogeny,
         category = "F hormonal/M normal"
         )

dat_fm_sn <- escalc("ROM", 
              m1i = F_surgical_m,
              m2i = M_normal_m,
              sd1i = F_surgical_sd,
              sd2i = M_normal_sd,
              n1i = F_surgical_n,
              n2i = M_normal_n,
              data = dat_fm_sn,
              )


# female surgical vs. male surgical (4)

dat_fm_ss <- dat %>% filter(is.na(Female_Surgical_Contra_Mean) == FALSE, 
                            is.na(Male_Surgical_Contra_Mean) == FALSE) %>% 
    transmute(F_surgical_m = Female_Surgical_Contra_Mean,
                 F_surgical_sd = sqrt(Female_Surgical_Contra_N)*Female_Surgical_Contra_SE,
                 F_surgical_n = Female_Surgical_Contra_N,
                 M_surgical_m = Male_Surgical_Contra_Mean,
                 M_surgical_sd = sqrt(Male_Surgical_Contra_N)*Male_Surgical_Contra_SE,
                 M_surgical_n = Male_Surgical_Contra_N,
                 species = species,
                 phylogeny = phylogeny,
                 category = "F surgical/M surgical"
                 )

dat_fm_ss <- escalc("ROM", 
                            m1i = F_surgical_m,
                            m2i = M_surgical_m,
                            sd1i = F_surgical_sd,
                            sd2i = M_surgical_sd,
                            n1i = F_surgical_n,
                            n2i = M_surgical_n,
                            data = dat_fm_ss,
                            )

# female normal vs. male normal (5)

dat_fm_nn1 <- dat %>% filter(is.na(Female_Hormonal_NoContra_Mean) == FALSE, 
                                                        is.na(Male_Hormonal_NoContra_Mean) == FALSE) %>% 
    transmute(F_normal_m = Female_Hormonal_NoContra_Mean,
                 F_normal_sd = sqrt(Female_Hormonal_NoContra_N)*Female_Hormonal_NoContra_SE,
                 F_normal_n = Female_Hormonal_NoContra_N,
                 M_normal_m = Male_Hormonal_NoContra_Mean,
                 M_normal_sd = sqrt(Male_Hormonal_NoContra_N)*Male_Hormonal_NoContra_SE,
                 M_normal_n = Male_Hormonal_NoContra_N,
                 species = species,
                 phylogeny = phylogeny,
                 category = "F normal/M normal"
                 )

dat_fm_nn1 <- escalc("ROM", 
                            m1i = F_normal_m,
                            m2i = M_normal_m,
                            sd1i = F_normal_sd,
                            sd2i = M_normal_sd,
                            n1i = F_normal_n,
                            n2i = M_normal_n,
                            data = dat_fm_nn1,
                            )

dat_fm_nn2 <- dat %>% filter(is.na(Female_Surgical_NoContra_Mean) == FALSE, 
                                                        is.na(Male_Surgical_NoContra_Mean) == FALSE) %>% 
    transmute(F_normal_m = Female_Surgical_NoContra_Mean,
                 F_normal_sd = sqrt(Female_Surgical_NoContra_N)*Female_Surgical_NoContra_SE,
                 F_normal_n = Female_Surgical_NoContra_N,
                 M_normal_m = Male_Surgical_NoContra_Mean,
                 M_normal_sd = sqrt(Male_Surgical_NoContra_N)*Male_Surgical_NoContra_SE,
                 M_normal_n = Male_Surgical_NoContra_N,
                 species = species,
                 phylogeny = phylogeny,
                 category = "F normal/M normal"
                 )

dat_fm_nn2 <- escalc("ROM", 
                            m1i = F_normal_m,
                            m2i = M_normal_m,
                            sd1i = F_normal_sd,
                            sd2i = M_normal_sd,
                            n1i = F_normal_n,
                            n2i = M_normal_n,
                            data = dat_fm_nn2,
                            )



# female normal vs. male hormonal (6)

dat_fm_nh <- dat %>% filter(is.na(Female_Hormonal_NoContra_Mean) == FALSE,
                            is.na(Male_Hormonal_Contra_Mean) == FALSE) %>%
  transmute(F_normal_m = Female_Hormonal_NoContra_Mean,
            F_normal_sd = sqrt(Female_Hormonal_NoContra_N)*Female_Hormonal_NoContra_SE,
            F_normal_n = Female_Hormonal_NoContra_N,
            M_hornomal_m = Male_Hormonal_Contra_Mean,
            M_hornomal_sd = sqrt(Male_Hormonal_Contra_N)*Male_Hormonal_Contra_SE,
            M_hornomal_n = Male_Hormonal_Contra_N,
            species = species,
            phylogeny = phylogeny,
            category = "F normal/M hornomal"
  )

dat_fm_nh <- escalc("ROM", 
                    m1i = F_normal_m,
                    m2i = M_hornomal_m,
                    sd1i = F_normal_sd,
                    sd2i = M_hornomal_sd,
                    n1i = F_normal_n,
                    n2i = M_hornomal_n,
                    data = dat_fm_nh,
)


# female hormonal vs. male hormonal (9)

dat_fm_hh <- dat %>% filter(is.na(Female_Hormonal_Contra_Mean) == FALSE,
                            is.na(Male_Hormonal_Contra_Mean) == FALSE) %>%
  transmute(F_hornomal_m = Female_Hormonal_Contra_Mean,
            F_hornomal_sd = sqrt(Female_Hormonal_Contra_N)*Female_Hormonal_Contra_SE,
            F_hornomal_n = Female_Hormonal_Contra_N,
            M_hornomal_m = Male_Hormonal_Contra_Mean,
            M_hornomal_sd = sqrt(Male_Hormonal_Contra_N)*Male_Hormonal_Contra_SE,
            M_hornomal_n = Male_Hormonal_Contra_N,
            species = species,
            phylogeny = phylogeny,
            category = "F hornomal/M hornomal"
  )
     
dat_fm_hh <- escalc("ROM", 
                    m1i = F_hornomal_m,
                    m2i = M_hornomal_m,
                    sd1i = F_hornomal_sd,
                    sd2i = M_hornomal_sd,
                    n1i = F_hornomal_n,
                    n2i = M_hornomal_n,
                    data = dat_fm_hh,
)



bind_rows(
  dat_fm_ns[ , 7:11], # 1
  dat_fm_hn[ , 7:11], # 2 
  dat_fm_sn[ , 7:11], # 3
  dat_fm_ss[ , 7:11], # 4
  dat_fm_nn1[ , 7:11], # 5
  dat_fm_nn2[ , 7:11], # 5
  dat_fm_nh[ , 7:11], # 6
  dat_fm_hh[ , 7:11], # 9
) -> dat_comb


dat_comb$obs_id <- factor(1:nrow(dat_comb))

# adding category
dat_comb$contraception <- factor(dat_comb$category, levels = c(
                                                           "F hornomal/M hornomal",
                                                           "F surgical/M surgical",
                                                           "F hormonal/M normal",  
                                                           "F surgical/M normal",
                                                           "F normal/M hormonal",
                                                           "F normal/M surgical",
                                                           "F normal/M normal"),
                                                labels = c(
                                                           "F contraceptive/\nM contraceptive",
                                                           "F contraceptive/\nM contraceptive",
                                                           "F contraceptive/\nM normal",
                                                           "F contraceptive/\nM normal",  
                                                           "F normal/\nM contraceptive",
                                                           "F normal/\nM contraceptive",
                                                           "F normal/\nM normal"),
                             
)

# absolute values
dat_comb <- dat_comb %>% mutate(
  abs_yi2 = abs(yi), # conservative
  abs_yi = folded_mu(yi, vi), # alternative way
  abs_vi = folded_v(yi, vi))

#write_csv(dat_comb, here("data", "zoo", "effect2.csv"))
```

:::

# Datasets

::: {.panel-tabset}

## Original dataset (used)

```{r}
kable(dat, "html", escape = FALSE, digits = 3) %>% kable_styling("striped", position = "left", full_width = TRUE) %>% 
  scroll_box(width = "100%", 
    height = "500px")
```


## Processed data 1: contraceptive vs. normal

```{r}
kable(dat_all, "html", escape = FALSE, digits = 3) %>% kable_styling("striped", position = "left", full_width = TRUE) %>% 
  scroll_box(width = "100%", 
    height = "500px")
```


## Processed data 2: sex differences 

```{r}
kable(dat_comb, "html", escape = FALSE, digits = 3) %>% kable_styling("striped", position = "left", full_width = TRUE) %>% 
  scroll_box(width = "100%", 
    height = "500px")
```

:::


# Analysis set 1: contraceptive vs. normal 

::: {.panel-tabset}

## Main meta-analysis

```{r}

# variance-covariance matrix for sampling error assuming 0.5 correlation
VCV <- vcalc(vi = dat_all$vi, 
             cluster = dat_all$species, 
             obs = dat_all$obs_id,
             rho = 0.5, 
             data = dat_all)


mod_all <- rma.mv(yi, V = VCV,
                     random = list(
                       ~1|species,
                       ~1|phylogeny,
                       ~1|obs_id),
                     R = list(phylogeny = cor_tree),
                     data = dat_all,
                     test = "t",
                     sparse = TRUE)
summary(mod_all)
round(i2_ml(mod_all), 2)

#robust(mod_all, cluster = species)  

orchard_plot(mod_all, xlab = "lnRR (all)", group = "species", g = FALSE)

```

## Meta-regression: sex 

```{r}
mod_all1 <- rma.mv(yi, V = VCV,
                   mod = ~ sex,
                  random = list(
                    ~1|species,
                    ~1|phylogeny,
                    ~1|obs_id),
                  R = list(phylogeny = cor_tree),
                  data = dat_all,
                  test = "t",
                  sparse = TRUE)
summary(mod_all1)


mod_all1b <- rma.mv(yi, V = VCV,
                   mod = ~ sex - 1,
                   random = list(
                     ~1|species,
                     ~1|phylogeny,
                     ~1|obs_id),
                   R = list(phylogeny = cor_tree),
                   data = dat_all,
                   test = "t",
                   sparse = TRUE)
summary(mod_all1b)

round(r2_ml(mod_all1), 5)

orchard_plot(mod_all1, mod = "sex",
             xlab = "lnRR (all)", group = "species", g = FALSE)
```

## Meta-regression: type

```{r}

dat_all$type <- factor(dat_all$type, 
                   levels = rev(c("surgical", "hormonal")))

mod_all2 <- rma.mv(yi, V = VCV,
                 mod = ~ type -1,
                 random = list(
                   ~1|species,
                   ~1|phylogeny,
                   ~1|obs_id),
                 R = list(phylogeny = cor_tree),
                 data = dat_all,
                  test = "t",
                  sparse = TRUE)

summary(mod_all2)

# R^2 - hardly any
round(r2_ml(mod_all2)*100, 5)

orchard_plot(mod_all2, mod = "type",
             xlab = "lnRR (all)", group = "species", g = FALSE, angle = 90)


# result table
all_models(mod_all2, mod = "type")
```

## Meta-regression: sex_type

```{r}

# creating a new variable combining sex and type
dat_all$sex_type <- as.factor(paste(dat_all$sex, dat_all$type, sep = "_"))

mod_all3 <- rma.mv(yi, V = VCV,
                 mod = ~ sex_type -1,
                 random = list(
                   ~1|species,
                   ~1|phylogeny,
                   ~1|obs_id),
                 R = list(phylogeny = cor_tree),
                 data = dat_all,
                  test = "t",
                  sparse = TRUE)

summary(mod_all3)

# R^2 - hardly any
round(r2_ml(mod_all3)*100, 5)

orchard_plot(mod_all3, mod = "sex_type",
             xlab = "lnRR (all)", group = "species", g = FALSE, angle = 90)


# result table
all_models(mod_all3, mod = "sex_type")
```


::: 

# Analysis set 2: sex difference

::: {.panel-tabset}

## Different sex differences

```{r}
# variance-covariance matrix for sampling error assuming 0.5 correlation
VCV <- vcalc(vi = dat_comb$vi, 
             cluster = dat_comb$species, 
             obs = dat_comb$obs_id,
             rho = 0.5, 
             data = dat_comb)

mod_comb <- rma.mv(yi, V = VCV,
                   mods = ~contraception - 1,
                   random = list(
                     ~1|species,
                     ~1|phylogeny,
                     ~1|obs_id),
                   R = list(phylogeny = cor_tree),
                   data = dat_comb,
                   control = list(optimizer = "Nelder-Mead"),
                    test = "t",
                  sparse = TRUE)
summary(mod_comb)

round(r2_ml(mod_comb)*100, 5)

#robust(mod_comb, cluster = species)  

orchard_plot(mod_comb, mod = "contraception",
             xlab = "log response ratio (lnRR)", group = "species", 
             g = FALSE, angle = 45)

all_models(mod_comb, mod = "contraception")  
```

## Different sex differences: absolute valies

```{r}
# variance-covariance matrix for sampling error assuming 0.5 correlation

VCVa <- vcalc(vi = dat_comb$abs_vi, 
             cluster = dat_comb$species, 
             obs = dat_comb$obs_id,
             rho = 0.5, 
             data = dat_comb)



mod_comb_a <- rma.mv(abs_yi, V = VCVa,
                     mods = ~contraception - 1,
                     random = list(
                       ~1|species,
                       ~1|phylogeny,
                       ~1|obs_id),
                     R = list(phylogeny = cor_tree),
                     data = dat_comb,
                     control = list(optimizer = "Nelder-Mead"),
                      test = "t",
                     sparse = TRUE)
summary(mod_comb_a)

round(r2_ml(mod_comb_a)*100, 5)

#robust(mod_comb_a, cluster = species)  

orchard_plot(mod_comb_a, mod = "contraception",
             xlab = "absolute log response ratio (lnRR)", group = "species", 
             g = FALSE, angle = 45)


all_models(mod_comb_a, mod = "contraception", type = "abs")
```

::: 

# Pre-post puberty analysis

This analysis compares the effect size of the lifespan extension before and after puberty.

## Loading data and obtaining effect isze

```{r}
#| warning: false
#| message: false

#dat0 <- read_csv(here("data", "zoo", "timing_male.csv"), na = c("", "NA"))
dat0 <- read_csv(here("data", "zoo", "resultsBaSTAbefAftMatur.csv"), na = c("", "NA"))


# phylogeny
# read RData
#dford 

load(here("Rdata", "zoo", "maxCredTreeMammals.RData"))

tree <- maxCred #read.tree(here("data", "zoo", "tree_zoo.tre"))

# taxonomy
tax <- read.csv(here("data", "zoo", "species_merge_list.csv"))

dat0 %>% left_join(tax, by = c("Species" = "ZIMSSpecies")) -> dat_full

# talking out species with no data (Pseudocheirus peregrinus = likely to be mistaks in data)
# dat_full %>% filter(Species != "Chrysocyon brachyurus" &
#                     Species != "Crocuta crocuta" &
#                     Species != "Neofelis nebulosa" &
#                     Species != "Panthera uncia" &
#                     Species != "Pseudocheirus peregrinus") %>% 
#   mutate(phylogeny = gsub(" ", "_", vertlife.species)) -> dat

dat_full %>% 
  mutate(phylogeny = gsub(" ", "_", vertlife.treename)) -> dat

# adding Cervus canadensis
# dat$vertlife.species[which(dat$Species == "Cervus canadensis")] <-"Cervus canadensis"
# dat$phylogeny[which(dat$Species == "Cervus canadensis")] <-"Cervus_canadensis"

# fixing species names
#dat$Species[dat$Species == "Equus asinus"] <- "Equus_africanus"
dat$Species[dat$Species == "Aonyx cinereus"] <- "Aonyx cinerea"
#dat$Species[dat$Species == "Bubalus bubalis"] <- "Bubalus arnee"


# life span data 
to_drop <-
  tree$tip.label[which(!(tree$tip.label %in% unique(dat$phylogeny)))]

tree <- drop.tip(tree, to_drop)

# checking the number of spp
#length(tree$tip.label)

tree <- as.ultrametric(tree)

#tree <- compute.brlen(tree)
cor_tree <- vcv(tree, corr = TRUE)


missing <- which(is.na(dat$phylogeny))

dat$Species[missing]

# creating effect size 

dat <- escalc("ROM", 
                    m2i = LifeExpContraAft,
                    m1i = LifeExpContraBef,
                    sd2i = SEcontraAft*sqrt(NContraAft),
                    sd1i = SEcontraBef*sqrt(NContraBef), 
                    n2i = NContraAft,
                    n1i = NContraBef,
                    data = dat,
)

dat$species <- factor(dat$Species)

```

## Meta-analysis and meta-regression

::: {.panel-tabset}

## Meta-analysis: main

```{r}

# meta-analysis

# variance-covariance matrix for sampling error assuming 0.5 correlation

mod_pp <- rma.mv(yi, V = vi,
                  random = list(
                    ~1|species,
                    ~1|phylogeny),
                  R = list(phylogeny = cor_tree),
                  data = dat,
                  test = "t",
                  sparse = TRUE)
summary(mod_pp)
round(i2_ml(mod_pp), 5)

#robust(mod_all, cluster = species)  

orchard_plot(mod_pp, xlab = "lnRR (all)", group = "species", g = FALSE)

```

## Meta-analysis without primates

```{r}
# data set excluding primates

dat %>% filter(Primate == "No") -> dat_short


mod_pp2 <- rma.mv(yi, V = vi,
                 random = list(
                   ~1|species,
                   ~1|phylogeny),
                 R = list(phylogeny = cor_tree),
                 data = dat_short,
                  test = "t",
                  sparse = TRUE)
summary(mod_pp2)
round(i2_ml(mod_pp2), 5)

#robust(mod_all, cluster = species)  

orchard_plot(mod_pp2, xlab = "lnRR (all)", group = "species", g = FALSE)

```

## Meta-regression (`Primate`)

```{r}

# primate as moderator

mod_pp3 <- rma.mv(yi, V = vi,
                  mod = ~ Primate,
                  random = list(
                    ~1|species,
                    ~1|phylogeny),
                  R = list(phylogeny = cor_tree),
                  data = dat,
                   test = "t",
                  sparse = TRUE)
summary(mod_pp3)
round(r2_ml(mod_pp3), 5)

mod_pp3b <- rma.mv(yi, V = vi,
                  mod = ~ Primate - 1,
                  random = list(
                    ~1|species,
                    ~1|phylogeny),
                  R = list(phylogeny = cor_tree),
                  data = dat,
                   test = "t",
                  sparse = TRUE)
summary(mod_pp3b)

orchard_plot(mod_pp3, mod = "Primate", xlab = "lnRR (all)", group = "species", g = FALSE)


#robust(mod_all, cluster = species)  

orchard_plot(mod_pp2, xlab = "lnRR (all)", group = "species", g = FALSE)

```

## Meta-analysis without phylogeny

```{r}

# no phylogeny

mod_np <- rma.mv(yi, V = vi,
                 random = list(
                   ~1|species),
                 data = dat,
                  test = "t",
                  sparse = TRUE)
summary(mod_np)
round(i2_ml(mod_np), 5)

#robust(mod_all, cluster = species)  

orchard_plot(mod_np, xlab = "lnRR (all)", group = "species", g = FALSE)

```

## Meta-regression (`Primate`) witout phylogeny

```{r}
# phlo - primates as a separate group 
mod_np2 <- rma.mv(yi, V = vi,
                 mod = ~ Primate,
                 random = list(
                   ~1|species),
                 data = dat,
                  test = "t",
                  sparse = TRUE)
summary(mod_np2)
round(r2_ml(mod_np2), 5)

mod_np2b <- rma.mv(yi, V = vi,
                 mod = ~ Primate -1,
                 random = list(
                   ~1|species),
                 data = dat,
                  test = "t",
                  sparse = TRUE)
summary(mod_np2b)

#robust(mod_all, cluster = species)  

orchard_plot(mod_np2, mod = "Primate", xlab = "lnRR (all)", group = "species", g = FALSE)

```

:::

# Extra analysis

This extra analysis compares the impact of group living and testes mass on the lifespan extension.

## Loading data and effect size calculation

```{r}
#| warning: false
#| message: false

# loading data
dat0 <- read.csv(here("data", "zoo", "extra.csv"), na = c("", "NA"))

load(here("Rdata", "zoo", "maxCredTreeMammals.RData"))

tree <- maxCred #read.tree(here("data", "zoo", "tree_zoo.tre"))

# taxonomy
tax <- read.csv(here("data", "zoo", "species_merge_list.csv"))

dat0 %>% left_join(tax, by = c("Species" = "ZIMSSpecies")) -> dat_full

# talking out species with no data (Pseudocheirus peregrinus = likely to be mistaks in data)
# dat_full %>% filter(Species != "Chrysocyon brachyurus" &
#                     Species != "Crocuta crocuta" &
#                     Species != "Neofelis nebulosa" &
#                     Species != "Panthera uncia" &
#                     Species != "Pseudocheirus peregrinus") %>% 
#   mutate(phylogeny = gsub(" ", "_", vertlife.species)) -> dat

dat_full %>% 
  mutate(phylogeny = gsub(" ", "_", vertlife.treename)) -> dat

# take out NA which at Species column

dat <- dat[!is.na(dat$Species),]

# take out or filter out Macaca leonina (Species)

dat <- dat[dat$Species != "Macaca leonina", ]

# life span data 
to_drop <-
  tree$tip.label[which(!(tree$tip.label %in% unique(dat$phylogeny)))]

tree <- drop.tip(tree, to_drop)

# checking the number of spp
#length(tree$tip.label)

tree <- as.ultrametric(tree)

#tree <- compute.brlen(tree)
cor_tree <- vcv(tree, corr = TRUE)


missing <- which(is.na(dat$phylogeny))

dat$Species[missing]

# creating effect size 

dat <- escalc("ROM", 
              m1i = LifeExpContra,
              m2i = LifeExpNoContra,
              sd1i = SEcontra*sqrt(Ncontra),
              sd2i = SEnoContra*sqrt(NnoContra), 
              n1i = Ncontra,
              n2i = NnoContra,
              data = dat,
)

```

# Meta-analysis and meta-regression

::: {.panel-tabset}

## Main

```{r}

mod_extra <- rma.mv(yi, V = vi,
                 random = list(
                   ~1|species,
                   ~1|phylogeny),
                 R = list(phylogeny = cor_tree),
                 test = "t",
                 data = dat)
summary(mod_extra)
round(i2_ml(mod_extra), 2)

#robust(mod_all, cluster = species)  

orchard_plot(mod_extra, xlab = "lnRR (all)", group = "species", g = FALSE)


```

## Meta-regression (`Group.living`)

```{r}
# fitting 2 moderators
mod_extra1 <- rma.mv(yi, V = vi,
                    mod = ~ Group.living - 1,
                    random = list(
                      ~1|species,
                      ~1|phylogeny),
                    R = list(phylogeny = cor_tree),
                    data = dat)
summary(mod_extra1)

orchard_plot(mod_extra1, xlab = "lnRR (all)", mod = "Group.living", group = "species", g = FALSE)

```

## Meta-regression (`lntestemass`)

```{r}
dat$lnbodymass <- log(dat$Bodymass)
dat$lntestemass <-log(dat$Testesmass)

mod_extra2 <- rma.mv(yi, V = vi,
                     mod = ~  lntestemass + lnbodymass,
                     random = list(
                       ~1|species,
                       ~1|phylogeny),
                     R = list(phylogeny = cor_tree),
                     data = dat)
summary(mod_extra2)

bubble_plot(mod_extra2, xlab = "log(Teste mass)", mod = "lntestemass", group = "species", g = FALSE)

```

:::

# PART IV: ANALYSIS OF CAUSES OF DEATH ON ZOO DATA

## Loading data

```{r}

# main data
dat0 <- read_csv(here("data", "zoo2", "causeDeathAll.csv"), na = c("", "NA"))

# turning character strings into factors
dat0 <- dat0 %>% mutate(across(where(is.character), as.factor))

# length(unique(dat0$Species)) # the number of species 131

# phylogeny
tree <- read.tree(here("data", "zoo", "tree_zoo.tre"))

# taxonomy
tax <- read.csv(here("data", "zoo", "vertlife_taxonomy_translation_table.csv"))

# there are missing species in the taxonomy table
dat0 %>% left_join(tax, by = c("Species" = "zims.species")) %>% 
  # make character strings into factors
  mutate(across(where(is.character), as.factor)) -> dat_full

dat <- dat_full


dat$Phylogeny <- gsub(" ", "_", dat$vertlife.species)

#life span data
to_drop <-
  tree$tip.label[which(!(tree$tip.label %in% unique(dat$Phylogeny)))]

tree <- drop.tip(tree, to_drop)

# checking the number of spp
#length(tree$tip.label)

tree <- compute.brlen(tree)

#tree <- compute.brlen(tree)
cor_tree <- vcv(tree, corr = TRUE)


# samller data set which does not have NA in dat$Phylogeny

dat <- dat %>% filter(!is.na(Phylogeny))

# Effect_ID is the unique identifier for the effect

dat$Effect_ID <- factor(1:nrow(dat))


# creating a variable combining Sex and Type
dat$Sex_Type <- as.factor(paste0(dat$Sex, "_", dat$Type))


```


## Meta-analysis of risk difference

::: {.panel-tabset}

## Trauma

```{r}
#########
# Trauma
#########

# Low
dat_trauma <- escalc(measure = "RD", 
               ai = Contra_Trauma_Low*Contra_Trauma_N, 
               bi = (1-Contra_Trauma_Low)*Contra_Trauma_N, 
               ci = noContra_Trauma_Low*noContra_Trauma_N,
               di = (1-noContra_Trauma_Low)*noContra_Trauma_N,
               var.names = c("yi_trauma_low", "vi_trauma_low"),
               data = dat)
# Med

dat_trauma <- escalc(measure = "RD", 
               ai = Contra_Trauma_Med*Contra_Trauma_N, 
               bi = (1-Contra_Trauma_Med)*Contra_Trauma_N, 
               ci = noContra_Trauma_Med*noContra_Trauma_N,
               di = (1-noContra_Trauma_Med)*noContra_Trauma_N,
               var.names = c("yi_trauma_med", "vi_trauma_med"),
               data = dat_trauma)

# Upp

dat_trauma <- escalc(measure = "RD", 
               ai = Contra_Trauma_Upp*Contra_Trauma_N, 
               bi = (1-Contra_Trauma_Upp)*Contra_Trauma_N, 
               ci = noContra_Trauma_Upp*noContra_Trauma_N,
               di = (1-noContra_Trauma_Upp)*noContra_Trauma_N,
               var.names = c("yi_trauma_upp", "vi_trauma_upp"),
               data = dat_trauma)

dat_trauma %>% filter(Contra_Trauma_N > 0) -> dat_trauma

# create a long format of the data  using these 3 types of effect sizes (low, med, upp) yi and vi are the effect size and variance of the effect size

dat_long_trauma <- dat_trauma %>% select(Effect_ID, Species, Phylogeny, Sex_Type, Sex,
                           yi_trauma_low, vi_trauma_low, 
                           yi_trauma_med, vi_trauma_med, 
                           yi_trauma_upp, vi_trauma_upp) %>% 
  pivot_longer(cols = c(yi_trauma_low, yi_trauma_med, yi_trauma_upp, vi_trauma_low, vi_trauma_med, vi_trauma_upp), 
               names_to = c(".value", "type"), 
               names_pattern = "(yi|vi)_(.*)")

dat_long_trauma <- dat_long_trauma %>% filter(!is.na(yi))

str(dat_long_trauma)

dat_long_trauma$type <- factor(dat_long_trauma$type, levels = rev(c("trauma_low", "trauma_med", "trauma_upp")),
                        labels = rev(c("Lower", "Median", "Upper")))

# effect size level ID

dat_long_trauma$Effect_ID2 <- factor(1 : nrow(dat_long_trauma))


# VCV

VCV <- vcalc(dat_long_trauma$vi, 
            cluster = dat_long_trauma$Effect_ID, 
            obs = dat_long_trauma$Effect_ID2, 
            data = dat_long_trauma, rho = 0.5)


# meta-analysis using dat_long

mod_trauma <- rma.mv(yi = yi, V = VCV, 
                     random = list(
                       ~1|Species,
                       ~1|Phylogeny,
                       #~1|Effect_ID, 
                       ~1|Effect_ID2),
                     R = list(Phylogeny = cor_tree), 
                     data = dat_long_trauma,
                     method="REML", 
                     sparse=TRUE,
                     control=list(optimizer="optim", optmethod="Nelder-Mead")
)


summary(mod_trauma)


# meta-regression

mod_trauma_reg <- rma.mv(yi = yi, V = VCV, 
                         random = list(
                           ~1|Species,
                           ~1|Phylogeny,
                           ~1|Effect_ID2), 
                         #struct = "DIAG",
                         R = list(Phylogeny = cor_tree), 
                         data = dat_long_trauma,
                         method="REML", 
                         control=list(optimizer="optim", optmethod= "Nelder-Mead"),
                         mods = ~ type - 1,
                         sparse=TRUE
)

summary(mod_trauma_reg)


p_trauma <- orchard_plot(mod_trauma_reg, mod = "type",
    xlab = "log risk difference (Trauma)", group = "Species") + ylim(-0.7, 0.7)


p_trauma

# sex_type 

dat_long_trauma$sex_type <-  as.factor(paste0(dat_long_trauma$Sex, "_", dat_long_trauma$type))

mod_trauma_reg2 <- rma.mv(yi = yi, V = VCV, 
                         random = list(
                           ~1|Species,
                           ~1|Phylogeny,
                           ~1|Effect_ID2), 
                         #struct = "DIAG",
                         R = list(Phylogeny = cor_tree), 
                         data = dat_long_trauma,
                         method="REML", 
                         control=list(optimizer="optim", optmethod= "Nelder-Mead"),
                         mods = ~ sex_type - 1,
                         sparse=TRUE
)

summary(mod_trauma_reg2)


p_trauma2 <- orchard_plot(mod_trauma_reg2, mod = "sex_type",
                         xlab = "log risk difference \n(Trauma)", group = "Species", flip = F) + ylim(-0.85, 0.7)


p_trauma2

# mod_table
res_trauma <- mod_results(mod_trauma_reg2,  mod = "sex_type", group = "Species")

attr(res_trauma, "class") <- NULL

res_trauma$mod_table$name <- paste( res_trauma$mod_table$name, "Trauma", sep = "_")
res_trauma$mod_table$name <- factor(res_trauma$mod_table$name)
res_trauma$data$moderator <- paste( res_trauma$data$moderator, "Trauma", sep = "_")
res_trauma$data$moderator <- factor(res_trauma$data$moderator)

```

## Infectious Disease

```{r}
####################
# Infectious Disease
####################
# Low

dat_infectious <- escalc(measure = "RD", 
               ai = Contra_InfectDisease_Low*Contra_InfectDisease_N,
               bi = (1-Contra_InfectDisease_Low)*Contra_InfectDisease_N,
               ci = noContra_InfectDisease_Low*noContra_InfectDisease_N,
               di = (1-noContra_InfectDisease_Low)*noContra_InfectDisease_N,
               var.names = c("yi_infectious_low", "vi_infectious_low"),
               data = dat)

# Med

dat_infectious <- escalc(measure = "RD",
               ai = Contra_InfectDisease_Med*Contra_InfectDisease_N, 
               bi = (1-Contra_InfectDisease_Med)*Contra_InfectDisease_N, 
               ci = noContra_InfectDisease_Med*noContra_InfectDisease_N,
               di = (1-noContra_InfectDisease_Med)*noContra_InfectDisease_N,
               var.names = c("yi_infectious_med", "vi_infectious_med"),
               data = dat_infectious)

# Upp

dat_infectious <- escalc(measure = "RD",
               ai = Contra_InfectDisease_Upp*Contra_InfectDisease_N, 
               bi = (1-Contra_InfectDisease_Upp)*Contra_InfectDisease_N, 
               ci = noContra_InfectDisease_Upp*noContra_InfectDisease_N,
               di = (1-noContra_InfectDisease_Upp)*noContra_InfectDisease_N,
               var.names = c("yi_infectious_upp", "vi_infectious_upp"),
               data = dat_infectious)

dat_infectious %>% filter(Contra_InfectDisease_N > 0) -> dat_infectious


# create a long format of the data using these 3 types of effect sizes (low, med, upp) yi and vi are the effect size and variance of the effect size

dat_long_infectious <- dat_infectious %>% select(Effect_ID, Species, Phylogeny, Sex_Type, Sex,
                           yi_infectious_low, vi_infectious_low, 
                           yi_infectious_med, vi_infectious_med, 
                           yi_infectious_upp, vi_infectious_upp) %>% 
  pivot_longer(cols = c(yi_infectious_low, yi_infectious_med, yi_infectious_upp, vi_infectious_low, vi_infectious_med, vi_infectious_upp), 
               names_to = c(".value", "type"), 
               names_pattern = "(yi|vi)_(.*)")

dat_long_infectious <- dat_long_infectious %>% filter(!is.na(yi))

str(dat_long_infectious)

dat_long_infectious$type <- factor(dat_long_infectious$type, 
                           levels = rev(c("infectious_low", "infectious_med", "infectious_upp")),
                           labels = rev(c("Lower", "Median", "Upper"))
)

# effect size level ID

dat_long_infectious$Effect_ID2 <- factor(1 : nrow(dat_long_infectious))

# VCV

VCV <- vcalc(dat_long_infectious$vi, 
            cluster = dat_long_infectious$Effect_ID, 
            obs = dat_long_infectious$Effect_ID2, 
            data = dat_long_infectious, rho = 0.5)


# meta-analysis using dat_long

mod_infectious <- rma.mv(yi = yi, V = VCV, 
                         random = list(
                           ~1|Species,
                           ~1|Phylogeny,
                           ~1|Effect_ID2), 
                         R = list(Phylogeny = cor_tree), 
                         data = dat_long_infectious,
                         test = "t",
                         method="REML", 
                         control=list(optimizer="optim", optmethod="Nelder-Mead")
)

summary(mod_infectious)

# meta-regression

mod_infectious_reg <- rma.mv(yi = yi, V = VCV, 
                             random = list(
                               ~1|Species,
                               ~1|Phylogeny,
                               ~1|Effect_ID2), 
                             #struct = "DIAG",
                             R = list(Phylogeny = cor_tree), 
                             data = dat_long_infectious,
                             method="REML", 
                             test = "t",
                             control=list(optimizer="optim", optmethod="Nelder-Mead"),
                             mods = ~type - 1,
                             sparse=TRUE
)

summary(mod_infectious_reg)

p_infectious <- orchard_plot(mod_infectious_reg, mod = "type",
    xlab = "log risk difference (Infectious Disease)", group = "Species") + ylim(-0.85, 0.7)

p_infectious

# sex_type 

dat_long_infectious$sex_type <-  as.factor(paste0(dat_long_infectious$Sex, "_", dat_long_infectious$type))

mod_infectious_reg2 <- rma.mv(yi = yi, V = VCV, 
                          random = list(
                            ~1|Species,
                            ~1|Phylogeny,
                            ~1|Effect_ID2), 
                          #struct = "DIAG",
                          R = list(Phylogeny = cor_tree), 
                          data = dat_long_infectious,
                          method="REML", 
                          control=list(optimizer="optim", optmethod= "Nelder-Mead"),
                          mods = ~ sex_type - 1,
                          sparse=TRUE
)

summary(mod_infectious_reg2)


p_infectious2 <- orchard_plot(mod_infectious_reg2, mod = "sex_type",
                          xlab = "log risk difference \n(Infectious Disease)", group = "Species", flip = F) + ylim(-0.85, 0.7)


p_infectious2

# mod_table
res_infectious <- mod_results(mod_infectious_reg2,  mod = "sex_type", group = "Species")

attr(res_infectious, "class") <- NULL

res_infectious$mod_table$name <- paste(res_infectious$mod_table$name, "Infectious", sep = "_")
res_infectious$mod_table$name <- factor(res_infectious$mod_table$name)
res_infectious$data$moderator <- paste(res_infectious$data$moderator, "Infectious", sep = "_")
res_infectious$data$moderator <- factor(res_infectious$data$moderator)



```


## Non-infectious Disease

```{r}
########################
# Non-infectious Disease
########################

# Low

dat_noninfectious <- escalc(measure = "RD", 
               ai = Contra_NonInfectDisease_Low*Contra_NonInfectDisease_N,
               bi = (1-Contra_NonInfectDisease_Low)*Contra_NonInfectDisease_N,
               ci = noContra_NonInfectDisease_Low*noContra_NonInfectDisease_N,
               di = (1-noContra_NonInfectDisease_Low)*noContra_NonInfectDisease_N,
               var.names = c("yi_noninfectious_low", "vi_noninfectious_low"),
               data = dat)

# Med

dat_noninfectious <- escalc(measure = "RD",
               ai = Contra_NonInfectDisease_Med*Contra_NonInfectDisease_N, 
               bi = (1-Contra_NonInfectDisease_Med)*Contra_NonInfectDisease_N, 
               ci = noContra_NonInfectDisease_Med*noContra_NonInfectDisease_N,
               di = (1-noContra_NonInfectDisease_Med)*noContra_NonInfectDisease_N,
               var.names = c("yi_noninfectious_med", "vi_noninfectious_med"),
               data = dat_noninfectious)

# Upp

dat_noninfectious <- escalc(measure = "RD",
               ai = Contra_NonInfectDisease_Upp*Contra_NonInfectDisease_N, 
               bi = (1-Contra_NonInfectDisease_Upp)*Contra_NonInfectDisease_N, 
               ci = noContra_NonInfectDisease_Upp*noContra_NonInfectDisease_N,
               di = (1-noContra_NonInfectDisease_Upp)*noContra_NonInfectDisease_N,
               var.names = c("yi_noninfectious_upp", "vi_noninfectious_upp"),
               data = dat_noninfectious)

dat_noninfectious %>% filter(Contra_NonInfectDisease_N > 0) -> dat_noninfectious

# create a long format of the data using these 3 types of effect sizes (low, med, upp) yi and vi are the effect size and variance of the effect size

dat_long_noninfectious <- dat_noninfectious %>% select(Effect_ID, Species, Phylogeny, Sex_Type, Sex,
                           yi_noninfectious_low, vi_noninfectious_low, 
                           yi_noninfectious_med, vi_noninfectious_med, 
                           yi_noninfectious_upp, vi_noninfectious_upp) %>% 
  pivot_longer(cols = c(yi_noninfectious_low, yi_noninfectious_med, yi_noninfectious_upp, vi_noninfectious_low, vi_noninfectious_med, vi_noninfectious_upp), 
               names_to = c(".value", "type"), 
               names_pattern = "(yi|vi)_(.*)")

dat_long_noninfectious <- dat_long_noninfectious %>% filter(!is.na(yi))

str(dat_long_noninfectious)

dat_long_noninfectious$type <- factor(dat_long_noninfectious$type, 
                           levels = rev(c("noninfectious_low", "noninfectious_med", "noninfectious_upp")),
                           labels = rev(c("Lower", "Median", "Upper"))
                           )

# effect size level ID

dat_long_noninfectious$Effect_ID2 <- factor(1 : nrow(dat_long_noninfectious))

# VCV

VCV <- vcalc(dat_long_noninfectious$vi, 
            cluster = dat_long_noninfectious$Effect_ID, 
            obs = dat_long_noninfectious$Effect_ID2, 
            data = dat_long_noninfectious, rho = 0.5)

# meta-analysis using dat_long

mod_noninfectious <- rma.mv(yi = yi, V = VCV, 
                           random = list(
                             ~1|Species,
                             ~1|Phylogeny,
                             ~1|Effect_ID2), 
                           R = list(Phylogeny = cor_tree), 
                           data = dat_long_noninfectious,
                           method="REML", 
                           test = "t",
                           control=list(optimizer="optim", optmethod="Nelder-Mead")
)

summary(mod_noninfectious)

# meta-regression

mod_noninfectious_reg <- rma.mv(yi = yi, V = VCV, 
                               random = list(
                                 ~1|Species,
                                 ~1|Phylogeny,
                                 ~1|Effect_ID2), 
                               #struct = "DIAG",
                               R = list(Phylogeny = cor_tree), 
                               data = dat_long_noninfectious,
                               method="REML", 
                               control=list(optimizer="optim", optmethod="Nelder-Mead"),
                               mods = ~type - 1,
                               test = "t",
                               sparse=TRUE
)

summary(mod_noninfectious_reg)

p_noninfectious <- orchard_plot(mod_noninfectious_reg, mod = "type",
    xlab = "log risk difference (Non-infectious Disease)", group = "Species") + ylim(-0.85, 0.7)

p_noninfectious


# sex_type 

dat_long_noninfectious$sex_type <-  as.factor(paste0(dat_long_noninfectious$Sex, "_", dat_long_noninfectious$type))

mod_noninfectious_reg2 <- rma.mv(yi = yi, V = VCV, 
                              random = list(
                                ~1|Species,
                                ~1|Phylogeny,
                                ~1|Effect_ID2), 
                              #struct = "DIAG",
                              R = list(Phylogeny = cor_tree), 
                              data = dat_long_noninfectious,
                              method="REML", 
                              control=list(optimizer="optim", optmethod= "Nelder-Mead"),
                              mods = ~ sex_type - 1,
                              sparse=TRUE
)

summary(mod_noninfectious_reg2)


p_noninfectious2 <- orchard_plot(mod_noninfectious_reg2, mod = "sex_type",
                              xlab = "log risk difference \n(None-infectious Disease)", group = "Species", flip = F) + ylim(-0.85, 0.7)


p_noninfectious2

# mod_table
res_noninfectious <- mod_results(mod_noninfectious_reg2,  mod = "sex_type", group = "Species")

attr(res_noninfectious, "class") <- NULL

res_noninfectious$mod_table$name <- paste(res_noninfectious$mod_table$name, "None-infectious", sep = "_")
res_noninfectious$mod_table$name <- factor(res_noninfectious$mod_table$name)
res_noninfectious$data$moderator <- paste(res_noninfectious$data$moderator, "None-infectious", sep = "_")
res_noninfectious$data$moderator <- factor(res_noninfectious$data$moderator)



```

## Chronic Disease


```{r}
###################
# Chronic Disease
###################

# Low

dat_chronic <- escalc(measure = "RD", 
               ai = Contra_ChronDisease_Low*Contra_ChronDisease_N,
               bi = (1-Contra_ChronDisease_Low)*Contra_ChronDisease_N,
               ci = noContra_ChronDisease_Low*noContra_ChronDisease_N,
               di = (1-noContra_ChronDisease_Low)*noContra_ChronDisease_N,
               var.names = c("yi_chronic_low", "vi_chronic_low"),
               data = dat)

# Med

dat_chronic <- escalc(measure = "RD",
               ai = Contra_ChronDisease_Med*Contra_ChronDisease_N, 
               bi = (1-Contra_ChronDisease_Med)*Contra_ChronDisease_N, 
               ci = noContra_ChronDisease_Med*noContra_ChronDisease_N,
               di = (1-noContra_ChronDisease_Med)*noContra_ChronDisease_N,
               var.names = c("yi_chronic_med", "vi_chronic_med"),
               data = dat_chronic)

# Upp

dat_chronic <- escalc(measure = "RD",
               ai = Contra_ChronDisease_Upp*Contra_ChronDisease_N, 
               bi = (1-Contra_ChronDisease_Upp)*Contra_ChronDisease_N, 
               ci = noContra_ChronDisease_Upp*noContra_ChronDisease_N,
               di = (1-noContra_ChronDisease_Upp)*noContra_ChronDisease_N,
               var.names = c("yi_chronic_upp", "vi_chronic_upp"),
               data = dat_chronic)

dat_chronic %>% filter(Contra_ChronDisease_N > 0) -> dat_chronic

# create a long format of the data using these 3 types of effect sizes (low, med, upp) yi and vi are the effect size and variance of the effect size

dat_long_chronic <- dat_chronic %>% select(Effect_ID, Species, Phylogeny, Sex_Type,Sex,
                           yi_chronic_low, vi_chronic_low, 
                           yi_chronic_med, vi_chronic_med, 
                           yi_chronic_upp, vi_chronic_upp) %>% 
  pivot_longer(cols = c(yi_chronic_low, yi_chronic_med, yi_chronic_upp, vi_chronic_low, vi_chronic_med, vi_chronic_upp), 
               names_to = c(".value", "type"), 
               names_pattern = "(yi|vi)_(.*)")

dat_long_chronic <- dat_long_chronic %>% filter(!is.na(yi))

str(dat_long_chronic)

dat_long_chronic$type <- factor(dat_long_chronic$type, 
                           levels = rev(c("chronic_low", "chronic_med", "chronic_upp")),
                           labels = rev(c("Lower", "Median", "Upper"))
                           )

# effect size level ID

dat_long_chronic$Effect_ID2 <- factor(1 : nrow(dat_long_chronic))

# VCV

VCV <- vcalc(dat_long_chronic$vi, 
            cluster = dat_long_chronic$Effect_ID, 
            obs = dat_long_chronic$Effect_ID2, 
            data = dat_long_chronic, rho = 0.5)

# meta-analysis using dat_long

mod_chronic <- rma.mv(yi = yi, V = VCV, 
                     random = list(
                       ~1|Species,
                       ~1|Phylogeny,
                       ~1|Effect_ID2), 
                     R = list(Phylogeny = cor_tree), 
                     data = dat_long_chronic,
                     method="REML", 
                     test = "t",
                     dfs = "contain",
                     control=list(optimizer="optim", optmethod="Nelder-Mead")
)

summary(mod_chronic)

# meta-regression

mod_chronic_reg <- rma.mv(yi = yi, V = VCV, 
                         random = list(
                           ~1|Species,
                           ~1|Phylogeny,
                           ~1|Effect_ID2), 
                         struct = "DIAG",
                         R = list(Phylogeny = cor_tree), 
                         data = dat_long_chronic,
                         method="REML", 
                         control=list(optimizer="optim", optmethod="Nelder-Mead"),
                         mods = ~type - 1,
                         test = "t",
                         sparse=TRUE
)

summary(mod_chronic_reg)

p_chronic <- orchard_plot(mod_chronic_reg, mod = "type",
    xlab = "log risk difference (Chronic Disease)", group = "Species") + ylim(-0.85, 0.7)

p_chronic

# sex_type 

dat_long_chronic$sex_type <-  as.factor(paste0(dat_long_chronic$Sex, "_", dat_long_chronic$type))

mod_chronic_reg2 <- rma.mv(yi = yi, V = VCV, 
                                 random = list(
                                   ~1|Species,
                                   ~1|Phylogeny,
                                   ~1|Effect_ID2), 
                                 #struct = "DIAG",
                                 R = list(Phylogeny = cor_tree), 
                                 data = dat_long_chronic,
                                 method="REML", 
                                 control=list(optimizer="optim", optmethod= "Nelder-Mead"),
                                 mods = ~ sex_type - 1,
                                 sparse=TRUE
)

summary(mod_chronic_reg2)


p_chronic2 <- orchard_plot(mod_chronic_reg2, mod = "sex_type",
                                 xlab = "log risk difference \n(Chronic Disease)", group = "Species", flip = F) + ylim(-0.85, 0.7)


p_chronic2

# mod_table
res_chronic <- mod_results(mod_chronic_reg2,  mod = "sex_type", group = "Species")

attr(res_chronic, "class") <- NULL

res_chronic$mod_table$name <- paste(res_chronic$mod_table$name, "Chronic", sep = "_")
res_chronic$mod_table$name <- factor(res_chronic$mod_table$name)
res_chronic$data$moderator <- paste(res_chronic$data$moderator, "Chronic", sep = "_")
res_chronic$data$moderator <- factor(res_chronic$data$moderator)


```

## Death at birth

```{r}
###################
# Death at birth
###################

# Low

dat_deathAtBirth <- escalc(measure = "RD", 
               ai = Contra_deathAtBirth_Low*Contra_deathAtBirth_N,
               bi = (1-Contra_deathAtBirth_Low)*Contra_deathAtBirth_N,
               ci = noContra_deathAtBirth_Low*noContra_deathAtBirth_N,
               di = (1-noContra_deathAtBirth_Low)*noContra_deathAtBirth_N,
               var.names = c("yi_deathAtBirth_low", "vi_deathAtBirth_low"),
               data = dat)

# Med

dat_deathAtBirth <- escalc(measure = "RD",
               ai = Contra_deathAtBirth_Med*Contra_deathAtBirth_N, 
               bi = (1-Contra_deathAtBirth_Med)*Contra_deathAtBirth_N, 
               ci = noContra_deathAtBirth_Med*noContra_deathAtBirth_N,
               di = (1-noContra_deathAtBirth_Med)*noContra_deathAtBirth_N,
               var.names = c("yi_deathAtBirth_med", "vi_deathAtBirth_med"),
               data = dat_deathAtBirth)

# Upp

dat_deathAtBirth <- escalc(measure = "RD",
               ai = Contra_deathAtBirth_Upp*Contra_deathAtBirth_N, 
               bi = (1-Contra_deathAtBirth_Upp)*Contra_deathAtBirth_N, 
               ci = noContra_deathAtBirth_Upp*noContra_deathAtBirth_N,
               di = (1-noContra_deathAtBirth_Upp)*noContra_deathAtBirth_N,
               var.names = c("yi_deathAtBirth_upp", "vi_deathAtBirth_upp"),
               data = dat_deathAtBirth)

dat_deathAtBirth %>% filter(Contra_deathAtBirth_N > 0) -> dat_deathAtBirth


# create a long format of the data using these 3 types of effect sizes (low, med, upp) yi and vi are the effect size and variance of the effect size

dat_long_deathAtBirth <- dat_deathAtBirth %>% select(Effect_ID, Species, Phylogeny, Sex_Type,Sex,
                           yi_deathAtBirth_low, vi_deathAtBirth_low, 
                           yi_deathAtBirth_med, vi_deathAtBirth_med, 
                           yi_deathAtBirth_upp, vi_deathAtBirth_upp) %>% 
  pivot_longer(cols = c(yi_deathAtBirth_low, yi_deathAtBirth_med, yi_deathAtBirth_upp, vi_deathAtBirth_low, vi_deathAtBirth_med, vi_deathAtBirth_upp), 
               names_to = c(".value", "type"), 
               names_pattern = "(yi|vi)_(.*)")

dat_long_deathAtBirth <- dat_long_deathAtBirth %>% filter(!is.na(yi))

str(dat_long_deathAtBirth)

dat_long_deathAtBirth$type <- factor(dat_long_deathAtBirth$type, 
                           levels = rev(c("deathAtBirth_low", "deathAtBirth_med", "deathAtBirth_upp")),
                           labels = rev(c("Lower", "Median", "Upper"))
                           )

# effect size level ID

dat_long_deathAtBirth$Effect_ID2 <- factor(1 : nrow(dat_long_deathAtBirth))

# VCV

VCV <- vcalc(dat_long_deathAtBirth$vi, 
            cluster = dat_long_deathAtBirth$Effect_ID, 
            obs = dat_long_deathAtBirth$Effect_ID2, 
            data = dat_long_deathAtBirth, rho = 0.5)

# meta-analysis using dat_long

mod_deathAtBirth <- rma.mv(yi = yi, V = VCV, 
                         random = list(
                           ~1|Species,
                           ~1|Phylogeny,
                           ~1|Effect_ID2), 
                         R = list(Phylogeny = cor_tree), 
                         data = dat_long_deathAtBirth,
                         method="REML", 
                         test = "t",
                         control=list(optimizer="optim", optmethod="Nelder-Mead")
)

summary(mod_deathAtBirth)

# meta-regression

mod_deathAtBirth_reg <- rma.mv(yi = yi, V = VCV, 
                             random = list(
                               ~1|Species,
                               ~1|Phylogeny,
                               ~1|Effect_ID2), 
                             #struct = "DIAG",
                             R = list(Phylogeny = cor_tree), 
                             data = dat_long_deathAtBirth,
                             method="REML", 
                             control=list(optimizer="optim", optmethod="Nelder-Mead"),
                             mods = ~type - 1,
                             test = "t",
                             sparse=FALSE
)

summary(mod_deathAtBirth_reg)

p_deathAtBirth <- orchard_plot(mod_deathAtBirth_reg, mod = "type",
    xlab = "log risk difference (Death at Birth)", group = "Species") + ylim(-0.85, 0.7)

p_deathAtBirth

# sex_type 

dat_long_deathAtBirth$sex_type <-  as.factor(paste0(dat_long_deathAtBirth$Sex, "_", dat_long_deathAtBirth$type))

mod_deathAtBirth_reg2 <- rma.mv(yi = yi, V = VCV, 
                           random = list(
                             ~1|Species,
                             ~1|Phylogeny,
                             ~1|Effect_ID2), 
                           #struct = "DIAG",
                           R = list(Phylogeny = cor_tree), 
                           data = dat_long_deathAtBirth,
                           method="REML", 
                           control=list(optimizer="optim", optmethod= "Nelder-Mead"),
                           mods = ~ sex_type - 1,
                           sparse=TRUE
)

summary(mod_deathAtBirth_reg2)


# mod_table
res_deathAtBirth <- mod_results(mod_deathAtBirth_reg2,  mod = "sex_type", group = "Species")

attr(res_deathAtBirth, "class") <- NULL

res_deathAtBirth$mod_table$name <- paste(res_deathAtBirth$mod_table$name, "Death", sep = "_")
res_deathAtBirth$mod_table$name <- factor(res_deathAtBirth$mod_table$name)
res_deathAtBirth$data$moderator <- paste(res_deathAtBirth$data$moderator, "Death", sep = "_")
res_deathAtBirth$data$moderator <- factor(res_deathAtBirth$data$moderator)


p_deathAtBirth2 <- orchard_plot(mod_deathAtBirth_reg2, mod = "sex_type",
                           xlab = "log risk difference \n(Death at birth)", group = "Species", flip = F) + ylim(-0.85, 0.7)


p_deathAtBirth2


```

## Other

```{r}
########
# Other
########

# Low

dat_other <- escalc(measure = "RD", 
               ai = Contra_Other_Low*Contra_Other_N,
               bi = (1-Contra_Other_Low)*Contra_Other_N,
               ci = noContra_Other_Low*noContra_Other_N,
               di = (1-noContra_Other_Low)*noContra_Other_N,
               var.names = c("yi_other_low", "vi_other_low"),
               data = dat)

# Med

dat_other <- escalc(measure = "RD",
               ai = Contra_Other_Med*Contra_Other_N, 
               bi = (1-Contra_Other_Med)*Contra_Other_N, 
               ci = noContra_Other_Med*noContra_Other_N,
               di = (1-noContra_Other_Med)*noContra_Other_N,
               var.names = c("yi_other_med", "vi_other_med"),
               data = dat_other)

# Upp

dat_other <- escalc(measure = "RD",
               ai = Contra_Other_Upp*Contra_Other_N, 
               bi = (1-Contra_Other_Upp)*Contra_Other_N, 
               ci = noContra_Other_Upp*noContra_Other_N,
               di = (1-noContra_Other_Upp)*noContra_Other_N,
               var.names = c("yi_other_upp", "vi_other_upp"),
               data = dat_other)

dat_other %>% filter(Contra_Other_N > 0) -> dat_other

# create a long format of the data using these 3 types of effect sizes (low, med, upp) yi and vi are the effect size and variance of the effect size

dat_long_other <- dat_other %>% select(Effect_ID, Species, Phylogeny, Sex_Type,Sex,
                           yi_other_low, vi_other_low, 
                           yi_other_med, vi_other_med, 
                           yi_other_upp, vi_other_upp) %>% 
  pivot_longer(cols = c(yi_other_low, yi_other_med, yi_other_upp, vi_other_low, vi_other_med, vi_other_upp), 
               names_to = c(".value", "type"), 
               names_pattern = "(yi|vi)_(.*)")

dat_long_other <- dat_long_other %>% filter(!is.na(yi))

str(dat_long_other)

dat_long_other$type <- factor(dat_long_other$type, 
                           levels = rev(c("other_low", "other_med", "other_upp")),
                           labels = rev(c("Lower", "Median", "Upper"))
                           )
# effect size level ID  

dat_long_other$Effect_ID2 <- factor(1 : nrow(dat_long_other))

# VCV

VCV <- vcalc(dat_long_other$vi, 
            cluster = dat_long_other$Effect_ID, 
            obs = dat_long_other$Effect_ID2, 
            data = dat_long_other, rho = 0.5)


# meta-analysis using dat_long

mod_other <- rma.mv(yi = yi, V = VCV, 
                     random = list(
                       ~1|Species,
                       ~1|Phylogeny,
                       ~1|Effect_ID2), 
                     R = list(Phylogeny = cor_tree), 
                     data = dat_long_other,
                     method="REML", 
                     test = "t",
                     control=list(optimizer="optim", optmethod="Nelder-Mead")
)

summary(mod_other)

# meta-regression

mod_other_reg <- rma.mv(yi = yi, V = VCV, 
                         random = list(
                           ~1|Species,
                           ~1|Phylogeny,
                           ~1|Effect_ID2), 
                         #struct = "DIAG",
                         R = list(Phylogeny = cor_tree), 
                         data = dat_long_other,
                         method="REML", 
                         control=list(optimizer="optim", optmethod="Nelder-Mead"),
                         mods = ~type - 1,
                         test = "t",
                         sparse=FALSE
)

summary(mod_other_reg)

p_other <- orchard_plot(mod_other_reg, mod = "type",
    xlab = "log risk difference (Other)", group = "Species") + ylim(-0.85, 0.7)

p_other

# sex_type 

dat_long_other$sex_type <-  as.factor(paste0(dat_long_other$Sex, "_", dat_long_other$type))

mod_other_reg2 <- rma.mv(yi = yi, V = VCV, 
                           random = list(
                             ~1|Species,
                             ~1|Phylogeny,
                             ~1|Effect_ID2), 
                           #struct = "DIAG",
                           R = list(Phylogeny = cor_tree), 
                           data = dat_long_other,
                           method="REML", 
                           control=list(optimizer="optim", optmethod= "Nelder-Mead"),
                           mods = ~ sex_type - 1,
                           sparse=TRUE
)

summary(mod_other_reg2)


p_other2 <- orchard_plot(mod_other_reg2, mod = "sex_type",
                           xlab = "log risk difference \n(Other causes)", group = "Species", flip = F) + ylim(-0.85, 0.7)


p_other2
```


:::

## Figure code

```{r}
#| code-fold: true
#| eval: false

# mod_table
res_other <- mod_results(mod_other_reg2,  mod = "sex_type", group = "Species")

attr(res_other, "class") <- NULL

res_other$mod_table$name <- paste(res_other$mod_table$name, "Other", sep = "_")
res_other$mod_table$name <- factor(res_other$mod_table$name)
res_other$data$moderator <- paste(res_other$data$moderator, "Other", sep = "_")
res_other$data$moderator <- factor(res_other$data$moderator)

# combining all plots - use cowplot

p_all <- plot_grid(p_trauma, 
                   p_infectious, 
                   p_noninfectious, 
                   p_chronic, 
                   p_deathAtBirth, 
                   p_other,
                   ncol = 2)

p_all

p_all2 <- plot_grid(p_trauma2, 
                   p_infectious2, 
                   p_noninfectious2, 
                   p_chronic2, 
                   #p_deathAtBirth, 
                   p_other2,
                   ncol = 2)

p_all2

# using patchwork

design <- "AAAA
           BBBB
           CCCC
           DDDD
           EE##
           FFFF"


p_trauma2 + p_infectious2 + p_noninfectious2 + p_chronic2 + p_deathAtBirth2 + p_other2 +
  plot_layout(design = design) + plot_annotation(title = "Risk Difference (RD) for different causes of death")


##############
# figures 
# lower female
##################

mod_table_lower_f <- rbind(res_other$mod_table[1, ],
                           res_deathAtBirth$mod_table[1, ],
                           res_chronic$mod_table[1, ],
                           res_noninfectious$mod_table[1, ],
                           res_infectious$mod_table[1, ],
                           res_trauma$mod_table[1, ]
                           )

data_lower_f <- rbind(res_trauma$data[res_trauma$data$moderator == "Female_Lower_Trauma", ],
                      res_infectious$data[res_infectious$data$moderator == "Female_Lower_Infectious", ],
                      res_noninfectious$data[res_noninfectious$data$moderator == "Female_Lower_None-infectious", ],
                      res_chronic$data[res_chronic$data$moderator == "Female_Lower_Chronic", ],
                      res_deathAtBirth$data[res_deathAtBirth$data$moderator == "Female_Lower_Death", ],
                      res_other$data[res_other$data$moderator == "Female_Lower_Other", ])

mod_table_lower_f$name <- gsub("Female_Lower_", "", mod_table_lower_f$name)
mod_table_lower_f$name <- factor(mod_table_lower_f$name, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Death", "Other")), 
                              labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                         "Chronic\ndisease", "Death\nat birth", "Other\ncauses")) )
data_lower_f$moderator <- gsub("Female_Lower_", "", data_lower_f$moderator)
data_lower_f$moderator <- factor(data_lower_f$moderator, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Death", "Other")), 
                              labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                         "Chronic\ndisease", "Death\nat birth", "Other\ncauses")) )

res_lower_f <- list(mod_table = mod_table_lower_f, data = data_lower_f)

class(res_lower_f) <-  c("orchard", "data.frame")

p_lower_f <- orchard_plot(res_lower_f, mod = "sex_type",
            xlab = "log risk difference (Lower)", group = "Species", angle = 0) + ylim(-0.85, 0.7) + labs(title = "Female") + 
  theme(axis.title.x = element_blank(), axis.text.x  = element_blank(), axis.ticks.x = element_blank())
  #theme(axis.title.y = element_blank(), axis.text.y  = element_blank(), axis.ticks.y = element_blank())

# median female

mod_table_median_f <- rbind(res_other$mod_table[2, ],
                           res_deathAtBirth$mod_table[2, ],
                           res_chronic$mod_table[2, ],
                           res_noninfectious$mod_table[2, ],
                           res_infectious$mod_table[2, ],
                           res_trauma$mod_table[2, ]
                           )

data_median_f <- rbind(res_trauma$data[res_trauma$data$moderator == "Female_Median_Trauma", ],
                      res_infectious$data[res_infectious$data$moderator == "Female_Median_Infectious", ],
                      res_noninfectious$data[res_noninfectious$data$moderator == "Female_Median_None-infectious", ],
                      res_chronic$data[res_chronic$data$moderator == "Female_Median_Chronic", ],
                      res_deathAtBirth$data[res_deathAtBirth$data$moderator == "Female_Median_Death", ],
                      res_other$data[res_other$data$moderator == "Female_Median_Other", ]
                      )

mod_table_median_f$name <- gsub("Female_Median_", "", mod_table_median_f$name)
mod_table_median_f$name <- factor(mod_table_median_f$name, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Death", "Other")), 
                              labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                         "Chronic\ndisease", "Death\nat birth", "Other\ncauses")) )
data_median_f$moderator <- gsub("Female_Median_", "", data_median_f$moderator)
data_median_f$moderator <- factor(data_median_f$moderator, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Death", "Other")), 
                              labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                         "Chronic\ndisease", "Death\nat birth", "Other\ncauses")) )

res_median_f <- list(mod_table = mod_table_median_f, data = data_median_f)

class(res_median_f) <-  c("orchard", "data.frame")

p_median_f <- orchard_plot(res_median_f, mod = "sex_type",
            xlab = "log risk difference (Median)", group = "Species", angle = 0) + ylim(-0.85, 0.7) + 
  theme(axis.title.y = element_blank(), axis.text.y  = element_blank(), axis.ticks.y = element_blank()) + 
  theme(axis.title.x = element_blank(), axis.text.x  = element_blank(), axis.ticks.x = element_blank())

# upper female

mod_table_upper_f <- rbind(res_other$mod_table[3, ],
                           res_deathAtBirth$mod_table[3, ],
                           res_chronic$mod_table[3, ],
                           res_noninfectious$mod_table[3, ],
                           res_infectious$mod_table[3, ],
                           res_trauma$mod_table[3, ]
                           )

data_upper_f <- rbind(res_trauma$data[res_trauma$data$moderator == "Female_Upper_Trauma", ],
                      res_infectious$data[res_infectious$data$moderator == "Female_Upper_Infectious", ],
                      res_noninfectious$data[res_noninfectious$data$moderator == "Female_Upper_None-infectious", ],
                      res_chronic$data[res_chronic$data$moderator == "Female_Upper_Chronic", ],
                      res_deathAtBirth$data[res_deathAtBirth$data$moderator == "Female_Upper_Death", ],
                      res_other$data[res_other$data$moderator == "Female_Upper_Other", ]
                      ) 

mod_table_upper_f$name <- gsub("Female_Upper_", "", mod_table_upper_f$name)
mod_table_upper_f$name <- factor(mod_table_upper_f$name, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Death", "Other")), 
                                  labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                 "Chronic\ndisease", "Death\nat birth", "Other\ncauses")) )
data_upper_f$moderator <- gsub("Female_Upper_", "", data_upper_f$moderator)
data_upper_f$moderator <- factor(data_upper_f$moderator, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Death", "Other")), 
                                  labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                 "Chronic\ndisease", "Death\nat birth", "Other\ncauses")) )

res_upper_f <- list(mod_table = mod_table_upper_f, data = data_upper_f)

class(res_upper_f) <-  c("orchard", "data.frame")

p_upper_f <- orchard_plot(res_upper_f, mod = "sex_type",
                           xlab = "log risk difference (Upper)", group = "Species", angle = 0) + ylim(-0.85, 0.7) + 
  theme(axis.title.y = element_blank(), axis.text.y  = element_blank(), axis.ticks.y = element_blank()) + 
  theme(axis.title.x = element_blank(), axis.text.x  = element_blank(), axis.ticks.x = element_blank())

# lower male

mod_table_lower_m <- rbind(res_other$mod_table[4, ],
                           res_chronic$mod_table[4, ],
                           res_noninfectious$mod_table[4, ],
                           res_infectious$mod_table[4, ],
                           res_trauma$mod_table[4, ]
                           )

mod_table_lower_m$name <- as.character(mod_table_lower_m$name)

data_lower_m <- rbind(res_trauma$data[res_trauma$data$moderator == "Male_Lower_Trauma", ],
                      res_infectious$data[res_infectious$data$moderator == "Male_Lower_Infectious", ],
                      res_noninfectious$data[res_noninfectious$data$moderator == "Male_Lower_None-infectious", ],
                      res_chronic$data[res_chronic$data$moderator == "Male_Lower_Chronic", ],
                      res_other$data[res_other$data$moderator == "Male_Lower_Other", ])

data_lower_m$moderator <- as.character(data_lower_m$moderator)

mod_table_lower_m$name <- gsub("Male_Lower_", "", mod_table_lower_m$name)
mod_table_lower_m$name <- factor(mod_table_lower_m$name, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic","Other")), 
                                 labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                "Chronic\ndisease", "Other\ncauses")) )
data_lower_m$moderator <- gsub("Male_Lower_", "", data_lower_m$moderator)
data_lower_m$moderator <- factor(data_lower_m$moderator, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Other")), 
                                 labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                "Chronic\ndisease", "Other\ncauses")) )

res_lower_m <- list(mod_table = mod_table_lower_m, data = data_lower_m)

class(res_lower_m) <-  c("orchard", "data.frame") 

p_lower_m <- orchard_plot(res_lower_m, mod = "sex_type",
                          xlab = "log risk difference (Lower)", group = "Species", angle = 0) + ylim(-0.85, 0.7) + labs(title = "Male") #+ 
 #theme(axis.title.y = element_blank(), axis.text.y  = element_blank(), axis.ticks.y = element_blank())


# median male

mod_table_median_m <- rbind(res_other$mod_table[5, ],
                           res_chronic$mod_table[5, ],
                           res_noninfectious$mod_table[5, ],
                           res_infectious$mod_table[5, ],
                           res_trauma$mod_table[5, ]
                           )

mod_table_median_m$name <- as.character(mod_table_median_m$name)

data_median_m <- rbind(res_trauma$data[res_trauma$data$moderator == "Male_Median_Trauma", ],
                      res_infectious$data[res_infectious$data$moderator == "Male_Median_Infectious", ],
                      res_noninfectious$data[res_noninfectious$data$moderator == "Male_Median_None-infectious", ],
                      res_chronic$data[res_chronic$data$moderator == "Male_Median_Chronic", ],
                      res_other$data[res_other$data$moderator == "Male_Median_Other", ])

data_median_m$moderator <- as.character(data_median_m$moderator)

mod_table_median_m$name <- gsub("Male_Median_", "", mod_table_median_m$name)
mod_table_median_m$name <- factor(mod_table_median_m$name, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic","Other")), 
                                 labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                "Chronic\ndisease", "Other\ncauses")) )
data_median_m$moderator <- gsub("Male_Median_", "", data_median_m$moderator)
data_median_m$moderator <- factor(data_median_m$moderator, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Other")), 
                                 labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                "Chronic\ndisease", "Other\ncauses")) )

res_median_m <- list(mod_table = mod_table_median_m, data = data_median_m)

class(res_median_m) <-  c("orchard", "data.frame") 

p_median_m <- orchard_plot(res_median_m, mod = "sex_type",
                          xlab = "log risk difference (Median)", group = "Species", angle = 0) + ylim(-0.85, 0.7)  +
  theme(axis.title.y = element_blank(), axis.text.y  = element_blank(), axis.ticks.y = element_blank())
                                          
# upper male

mod_table_upper_m <- rbind(res_other$mod_table[6, ],
                           res_chronic$mod_table[6, ],
                           res_noninfectious$mod_table[6, ],
                           res_infectious$mod_table[6, ],
                           res_trauma$mod_table[6, ]
                           )

mod_table_upper_m$name <- as.character(mod_table_upper_m$name)

data_upper_m <- rbind(res_trauma$data[res_trauma$data$moderator == "Male_Upper_Trauma", ],
                      res_infectious$data[res_infectious$data$moderator == "Male_Upper_Infectious", ],
                      res_noninfectious$data[res_noninfectious$data$moderator == "Male_Upper_None-infectious", ],
                      res_chronic$data[res_chronic$data$moderator == "Male_Upper_Chronic", ],
                      res_other$data[res_other$data$moderator == "Male_Upper_Other", ])

data_upper_m$moderator <- as.character(data_upper_m$moderator)

mod_table_upper_m$name <- gsub("Male_Upper_", "", mod_table_upper_m$name)
mod_table_upper_m$name <- factor(mod_table_upper_m$name, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic","Other")), 
                                 labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                "Chronic\ndisease", "Other\ncauses")) )
data_upper_m$moderator <- gsub("Male_Upper_", "", data_upper_m$moderator)
data_upper_m$moderator <- factor(data_upper_m$moderator, levels = rev(c("Trauma", "Infectious", "None-infectious", "Chronic", "Other")), 
                                 labels = rev(c("Trauma", "Infectious\ndisease", "None-infectious\ndisease", 
                                                "Chronic\ndisease", "Other\ncauses")) )

res_upper_m <- list(mod_table = mod_table_upper_m, data = data_upper_m)

class(res_upper_m) <-  c("orchard", "data.frame")
 
p_upper_m <- orchard_plot(res_upper_m, mod = "sex_type",
                          xlab = "log risk difference (Upper)", group = "Species", angle = 0) + ylim(-0.85, 0.7) +  
  theme(axis.title.y = element_blank(), axis.text.y  = element_blank(), axis.ticks.y = element_blank())


# all the data for causes of death saving as rds each (6 of them)

saveRDS(res_lower_f, here("Rdata", "fig", "res_lower_f.rds"))
saveRDS(res_median_f, here("Rdata", "fig", "res_median_f.rds"))
saveRDS(res_upper_f, here("Rdata", "fig", "res_upper_f.rds"))
saveRDS(res_lower_m, here("Rdata", "fig", "res_lower_m.rds"))
saveRDS(res_median_m, here("Rdata", "fig", "res_median_m.rds"))
saveRDS(res_upper_m, here("Rdata", "fig", "res_upper_m.rds"))

######################
#ddrwoing
#########################

p_female <- p_lower_f + p_median_f + p_upper_f +
   plot_annotation(title = "Female")

p_male <- p_lower_m + p_median_m + p_upper_m +
  plot_annotation(title = "Male")

p_female /p_male + plot_layout(heights = c(6,5))
```




# R Session Informtion

```{r}
sessionInfo() %>% pander()
```
